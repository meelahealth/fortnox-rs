/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SupplierInvoice {
    #[serde(rename = "@url", skip_serializing_if = "Option::is_none")]
    pub at_url: Option<String>,
    #[serde(rename = "AdministrationFee", skip_serializing_if = "Option::is_none")]
    pub administration_fee: Option<String>,
    #[serde(rename = "Balance", skip_serializing_if = "Option::is_none")]
    pub balance: Option<String>,
    #[serde(rename = "Booked", skip_serializing_if = "Option::is_none")]
    pub booked: Option<bool>,
    #[serde(rename = "Cancelled", skip_serializing_if = "Option::is_none")]
    pub cancelled: Option<bool>,
    #[serde(rename = "Comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "CostCenter", skip_serializing_if = "Option::is_none")]
    pub cost_center: Option<String>,
    #[serde(rename = "Credit", skip_serializing_if = "Option::is_none")]
    pub credit: Option<bool>,
    #[serde(rename = "CreditReference", skip_serializing_if = "Option::is_none")]
    pub credit_reference: Option<i32>,
    #[serde(rename = "Currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "CurrencyRate", skip_serializing_if = "Option::is_none")]
    pub currency_rate: Option<String>,
    #[serde(rename = "CurrencyUnit", skip_serializing_if = "Option::is_none")]
    pub currency_unit: Option<f64>,
    #[serde(rename = "DisablePaymentFile", skip_serializing_if = "Option::is_none")]
    pub disable_payment_file: Option<bool>,
    #[serde(rename = "DueDate", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    #[serde(
        rename = "ExternalInvoiceNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_invoice_number: Option<String>,
    #[serde(
        rename = "ExternalInvoiceSeries",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_invoice_series: Option<String>,
    #[serde(rename = "Freight", skip_serializing_if = "Option::is_none")]
    pub freight: Option<String>,
    #[serde(rename = "GivenNumber", skip_serializing_if = "Option::is_none")]
    pub given_number: Option<String>,
    #[serde(rename = "InvoiceDate", skip_serializing_if = "Option::is_none")]
    pub invoice_date: Option<String>,
    #[serde(rename = "InvoiceNumber", skip_serializing_if = "Option::is_none")]
    pub invoice_number: Option<String>,
    #[serde(rename = "OCR", skip_serializing_if = "Option::is_none")]
    pub ocr: Option<String>,
    #[serde(rename = "OurReference", skip_serializing_if = "Option::is_none")]
    pub our_reference: Option<String>,
    #[serde(rename = "PaymentPending", skip_serializing_if = "Option::is_none")]
    pub payment_pending: Option<bool>,
    #[serde(rename = "Project", skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    #[serde(rename = "RoundOffValue", skip_serializing_if = "Option::is_none")]
    pub round_off_value: Option<String>,
    #[serde(
        rename = "SupplierInvoiceRows",
        skip_serializing_if = "Option::is_none"
    )]
    pub supplier_invoice_rows: Option<Vec<crate::models::SupplierInvoiceSupplierInvoiceRow>>,
    #[serde(rename = "SupplierNumber")]
    pub supplier_number: String,
    #[serde(rename = "SupplierName", skip_serializing_if = "Option::is_none")]
    pub supplier_name: Option<String>,
    #[serde(rename = "Total", skip_serializing_if = "Option::is_none")]
    pub total: Option<String>,
    #[serde(rename = "VAT", skip_serializing_if = "Option::is_none")]
    pub vat: Option<String>,
    #[serde(rename = "YourReference", skip_serializing_if = "Option::is_none")]
    pub your_reference: Option<String>,
    #[serde(rename = "VoucherNumber", skip_serializing_if = "Option::is_none")]
    pub voucher_number: Option<i32>,
    #[serde(rename = "VoucherSeries", skip_serializing_if = "Option::is_none")]
    pub voucher_series: Option<String>,
    #[serde(rename = "VoucherYear", skip_serializing_if = "Option::is_none")]
    pub voucher_year: Option<i32>,
    #[serde(rename = "VATType", skip_serializing_if = "Option::is_none")]
    pub vat_type: Option<VatType>,
    #[serde(rename = "SalesType", skip_serializing_if = "Option::is_none")]
    pub sales_type: Option<SalesType>,
    #[serde(rename = "AccountingMethod", skip_serializing_if = "Option::is_none")]
    pub accounting_method: Option<AccountingMethod>,
    #[serde(rename = "Vouchers", skip_serializing_if = "Option::is_none")]
    pub vouchers: Option<Vec<crate::models::SupplierInvoiceVoucher>>,
    #[serde(rename = "FinalPayDate", skip_serializing_if = "Option::is_none")]
    pub final_pay_date: Option<String>,
}

impl SupplierInvoice {
    pub fn new(supplier_number: String) -> SupplierInvoice {
        SupplierInvoice {
            at_url: None,
            administration_fee: None,
            balance: None,
            booked: None,
            cancelled: None,
            comments: None,
            cost_center: None,
            credit: None,
            credit_reference: None,
            currency: None,
            currency_rate: None,
            currency_unit: None,
            disable_payment_file: None,
            due_date: None,
            external_invoice_number: None,
            external_invoice_series: None,
            freight: None,
            given_number: None,
            invoice_date: None,
            invoice_number: None,
            ocr: None,
            our_reference: None,
            payment_pending: None,
            project: None,
            round_off_value: None,
            supplier_invoice_rows: None,
            supplier_number,
            supplier_name: None,
            total: None,
            vat: None,
            your_reference: None,
            voucher_number: None,
            voucher_series: None,
            voucher_year: None,
            vat_type: None,
            sales_type: None,
            accounting_method: None,
            vouchers: None,
            final_pay_date: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VatType {
    #[serde(rename = "NORMAL")]
    Normal,
    #[serde(rename = "EUINTERNAL")]
    Euinternal,
    #[serde(rename = "REVERSE")]
    Reverse,
}

impl Default for VatType {
    fn default() -> VatType {
        Self::Normal
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SalesType {
    #[serde(rename = "STOCK")]
    Stock,
    #[serde(rename = "SERVICE")]
    Service,
}

impl Default for SalesType {
    fn default() -> SalesType {
        Self::Stock
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AccountingMethod {
    #[serde(rename = "ACCRUAL")]
    Accrual,
    #[serde(rename = "CASH")]
    Cash,
}

impl Default for AccountingMethod {
    fn default() -> AccountingMethod {
        Self::Accrual
    }
}
