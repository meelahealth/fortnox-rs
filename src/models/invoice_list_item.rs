/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct InvoiceListItem {
    #[serde(rename = "@url", skip_serializing_if = "Option::is_none")]
    pub at_url: Option<String>,
    #[serde(rename = "Balance", skip_serializing_if = "Option::is_none")]
    pub balance: Option<f64>,
    #[serde(rename = "Booked", skip_serializing_if = "Option::is_none")]
    pub booked: Option<bool>,
    #[serde(rename = "Cancelled", skip_serializing_if = "Option::is_none")]
    pub cancelled: Option<bool>,
    #[serde(rename = "CostCenter", skip_serializing_if = "Option::is_none")]
    pub cost_center: Option<String>,
    #[serde(rename = "Currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "CurrencyRate", skip_serializing_if = "Option::is_none")]
    pub currency_rate: Option<f64>,
    #[serde(rename = "CurrencyUnit", skip_serializing_if = "Option::is_none")]
    pub currency_unit: Option<f64>,
    #[serde(rename = "CustomerName", skip_serializing_if = "Option::is_none")]
    pub customer_name: Option<String>,
    #[serde(rename = "CustomerNumber", skip_serializing_if = "Option::is_none")]
    pub customer_number: Option<String>,
    #[serde(rename = "DocumentNumber", skip_serializing_if = "Option::is_none")]
    pub document_number: Option<String>,
    #[serde(rename = "DueDate", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    #[serde(
        rename = "ExternalInvoiceReference1",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_invoice_reference1: Option<String>,
    #[serde(
        rename = "ExternalInvoiceReference2",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_invoice_reference2: Option<String>,
    #[serde(rename = "InvoiceDate", skip_serializing_if = "Option::is_none")]
    pub invoice_date: Option<String>,
    #[serde(rename = "InvoiceType", skip_serializing_if = "Option::is_none")]
    pub invoice_type: Option<InvoiceType>,
    #[serde(rename = "NoxFinans", skip_serializing_if = "Option::is_none")]
    pub nox_finans: Option<bool>,
    #[serde(rename = "OCR", skip_serializing_if = "Option::is_none")]
    pub ocr: Option<String>,
    #[serde(rename = "VoucherNumber", skip_serializing_if = "Option::is_none")]
    pub voucher_number: Option<i32>,
    #[serde(rename = "VoucherSeries", skip_serializing_if = "Option::is_none")]
    pub voucher_series: Option<String>,
    #[serde(rename = "VoucherYear", skip_serializing_if = "Option::is_none")]
    pub voucher_year: Option<i32>,
    #[serde(rename = "WayOfDelivery", skip_serializing_if = "Option::is_none")]
    pub way_of_delivery: Option<String>,
    #[serde(rename = "TermsOfPayment", skip_serializing_if = "Option::is_none")]
    pub terms_of_payment: Option<String>,
    #[serde(rename = "Project", skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    #[serde(rename = "Sent", skip_serializing_if = "Option::is_none")]
    pub sent: Option<bool>,
    #[serde(rename = "Total", skip_serializing_if = "Option::is_none")]
    pub total: Option<f64>,
    #[serde(rename = "FinalPayDate", skip_serializing_if = "Option::is_none")]
    pub final_pay_date: Option<String>,
}

impl InvoiceListItem {
    pub fn new() -> InvoiceListItem {
        InvoiceListItem {
            at_url: None,
            balance: None,
            booked: None,
            cancelled: None,
            cost_center: None,
            currency: None,
            currency_rate: None,
            currency_unit: None,
            customer_name: None,
            customer_number: None,
            document_number: None,
            due_date: None,
            external_invoice_reference1: None,
            external_invoice_reference2: None,
            invoice_date: None,
            invoice_type: None,
            nox_finans: None,
            ocr: None,
            voucher_number: None,
            voucher_series: None,
            voucher_year: None,
            way_of_delivery: None,
            terms_of_payment: None,
            project: None,
            sent: None,
            total: None,
            final_pay_date: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InvoiceType {
    #[serde(rename = "INVOICE")]
    Invoice,
    #[serde(rename = "AGREEMENTINVOICE")]
    Agreementinvoice,
    #[serde(rename = "INTRESTINVOICE")]
    Intrestinvoice,
    #[serde(rename = "SUMMARYINVOICE")]
    Summaryinvoice,
    #[serde(rename = "CASHINVOICE")]
    Cashinvoice,
}

impl Default for InvoiceType {
    fn default() -> InvoiceType {
        Self::Invoice
    }
}
