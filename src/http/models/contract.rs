/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Contract {
    #[serde(rename = "@url", skip_serializing_if = "Option::is_none")]
    pub at_url: Option<String>,
    #[serde(
        rename = "@urlTaxReductionList",
        skip_serializing_if = "Option::is_none"
    )]
    pub at_url_tax_reduction_list: Option<String>,
    #[serde(rename = "Active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(rename = "AdministrationFee", skip_serializing_if = "Option::is_none")]
    pub administration_fee: Option<f64>,
    #[serde(rename = "BasisTaxReduction", skip_serializing_if = "Option::is_none")]
    pub basis_tax_reduction: Option<f64>,
    #[serde(rename = "Comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "Continuous", skip_serializing_if = "Option::is_none")]
    pub continuous: Option<bool>,
    #[serde(rename = "ContractDate", skip_serializing_if = "Option::is_none")]
    pub contract_date: Option<String>,
    #[serde(rename = "ContractLength", skip_serializing_if = "Option::is_none")]
    pub contract_length: Option<i32>,
    #[serde(
        rename = "ContributionPercent",
        skip_serializing_if = "Option::is_none"
    )]
    pub contribution_percent: Option<f64>,
    #[serde(rename = "ContributionValue", skip_serializing_if = "Option::is_none")]
    pub contribution_value: Option<f64>,
    #[serde(rename = "CostCenter", skip_serializing_if = "Option::is_none")]
    pub cost_center: Option<String>,
    #[serde(rename = "Currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "CustomerName", skip_serializing_if = "Option::is_none")]
    pub customer_name: Option<String>,
    #[serde(rename = "CustomerNumber")]
    pub customer_number: String,
    #[serde(rename = "DocumentNumber", skip_serializing_if = "Option::is_none")]
    pub document_number: Option<String>,
    #[serde(rename = "EmailInformation", skip_serializing_if = "Option::is_none")]
    pub email_information: Option<Box<crate::http::models::ContractEmailInformation>>,
    #[serde(
        rename = "ExternalInvoiceReference1",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_invoice_reference1: Option<String>,
    #[serde(
        rename = "ExternalInvoiceReference2",
        skip_serializing_if = "Option::is_none"
    )]
    pub external_invoice_reference2: Option<String>,
    #[serde(rename = "Freight", skip_serializing_if = "Option::is_none")]
    pub freight: Option<f64>,
    #[serde(rename = "Gross", skip_serializing_if = "Option::is_none")]
    pub gross: Option<f64>,
    #[serde(rename = "HouseWork", skip_serializing_if = "Option::is_none")]
    pub house_work: Option<bool>,
    #[serde(rename = "InvoiceDiscount", skip_serializing_if = "Option::is_none")]
    pub invoice_discount: Option<f64>,
    #[serde(rename = "InvoiceInterval", skip_serializing_if = "Option::is_none")]
    pub invoice_interval: Option<i32>,
    #[serde(rename = "InvoicesRemaining", skip_serializing_if = "Option::is_none")]
    pub invoices_remaining: Option<String>,
    #[serde(rename = "InvoiceRows")]
    pub invoice_rows: Vec<crate::http::models::ContractInvoiceRow>,
    #[serde(rename = "Language", skip_serializing_if = "Option::is_none")]
    pub language: Option<Language>,
    #[serde(rename = "LastInvoiceDate", skip_serializing_if = "Option::is_none")]
    pub last_invoice_date: Option<String>,
    #[serde(rename = "Net", skip_serializing_if = "Option::is_none")]
    pub net: Option<f64>,
    #[serde(rename = "OurReference", skip_serializing_if = "Option::is_none")]
    pub our_reference: Option<String>,
    #[serde(rename = "PeriodEnd")]
    pub period_end: String,
    #[serde(rename = "PeriodStart", skip_serializing_if = "Option::is_none")]
    pub period_start: Option<String>,
    #[serde(rename = "PriceList", skip_serializing_if = "Option::is_none")]
    pub price_list: Option<String>,
    #[serde(rename = "PrintTemplate", skip_serializing_if = "Option::is_none")]
    pub print_template: Option<String>,
    #[serde(rename = "Project", skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    #[serde(rename = "Remarks", skip_serializing_if = "Option::is_none")]
    pub remarks: Option<String>,
    #[serde(rename = "RoundOff", skip_serializing_if = "Option::is_none")]
    pub round_off: Option<f64>,
    #[serde(rename = "TaxReduction", skip_serializing_if = "Option::is_none")]
    pub tax_reduction: Option<f64>,
    #[serde(rename = "TemplateName", skip_serializing_if = "Option::is_none")]
    pub template_name: Option<String>,
    #[serde(rename = "TemplateNumber", skip_serializing_if = "Option::is_none")]
    pub template_number: Option<i32>,
    #[serde(rename = "TermsOfDelivery", skip_serializing_if = "Option::is_none")]
    pub terms_of_delivery: Option<String>,
    #[serde(rename = "TermsOfPayment", skip_serializing_if = "Option::is_none")]
    pub terms_of_payment: Option<String>,
    #[serde(rename = "Total", skip_serializing_if = "Option::is_none")]
    pub total: Option<f64>,
    #[serde(rename = "TotalToPay", skip_serializing_if = "Option::is_none")]
    pub total_to_pay: Option<f64>,
    #[serde(rename = "TotalVAT", skip_serializing_if = "Option::is_none")]
    pub total_vat: Option<f64>,
    #[serde(rename = "VatIncluded", skip_serializing_if = "Option::is_none")]
    pub vat_included: Option<bool>,
    #[serde(rename = "WayOfDelivery", skip_serializing_if = "Option::is_none")]
    pub way_of_delivery: Option<String>,
    #[serde(rename = "YourOrderNumber", skip_serializing_if = "Option::is_none")]
    pub your_order_number: Option<String>,
    #[serde(rename = "YourReference", skip_serializing_if = "Option::is_none")]
    pub your_reference: Option<String>,
    #[serde(rename = "TaxReductionType", skip_serializing_if = "Option::is_none")]
    pub tax_reduction_type: Option<TaxReductionType>,
}

impl Contract {
    pub fn new(
        customer_number: String,
        invoice_rows: Vec<crate::http::models::ContractInvoiceRow>,
        period_end: String,
    ) -> Contract {
        Contract {
            at_url: None,
            at_url_tax_reduction_list: None,
            active: None,
            administration_fee: None,
            basis_tax_reduction: None,
            comments: None,
            continuous: None,
            contract_date: None,
            contract_length: None,
            contribution_percent: None,
            contribution_value: None,
            cost_center: None,
            currency: None,
            customer_name: None,
            customer_number,
            document_number: None,
            email_information: None,
            external_invoice_reference1: None,
            external_invoice_reference2: None,
            freight: None,
            gross: None,
            house_work: None,
            invoice_discount: None,
            invoice_interval: None,
            invoices_remaining: None,
            invoice_rows,
            language: None,
            last_invoice_date: None,
            net: None,
            our_reference: None,
            period_end,
            period_start: None,
            price_list: None,
            print_template: None,
            project: None,
            remarks: None,
            round_off: None,
            tax_reduction: None,
            template_name: None,
            template_number: None,
            terms_of_delivery: None,
            terms_of_payment: None,
            total: None,
            total_to_pay: None,
            total_vat: None,
            vat_included: None,
            way_of_delivery: None,
            your_order_number: None,
            your_reference: None,
            tax_reduction_type: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Language {
    #[serde(rename = "SV")]
    Sv,
    #[serde(rename = "EN")]
    En,
}

impl Default for Language {
    fn default() -> Language {
        Self::Sv
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TaxReductionType {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "rot")]
    Rot,
    #[serde(rename = "rut")]
    Rut,
    #[serde(rename = "green")]
    Green,
}

impl Default for TaxReductionType {
    fn default() -> TaxReductionType {
        Self::None
    }
}
