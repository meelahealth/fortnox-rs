/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct EmployeeListItem {
    #[serde(rename = "EmployeeId", skip_serializing_if = "Option::is_none")]
    pub employee_id: Option<String>,
    #[serde(
        rename = "PersonalIdentityNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub personal_identity_number: Option<String>,
    #[serde(rename = "FirstName", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<String>,
    #[serde(rename = "LastName", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<String>,
    #[serde(rename = "FullName", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<String>,
    #[serde(rename = "Address1", skip_serializing_if = "Option::is_none")]
    pub address1: Option<String>,
    #[serde(rename = "Address2", skip_serializing_if = "Option::is_none")]
    pub address2: Option<String>,
    #[serde(rename = "PostCode", skip_serializing_if = "Option::is_none")]
    pub post_code: Option<String>,
    #[serde(rename = "City", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    #[serde(rename = "Country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[serde(rename = "Phone1", skip_serializing_if = "Option::is_none")]
    pub phone1: Option<String>,
    #[serde(rename = "Phone2", skip_serializing_if = "Option::is_none")]
    pub phone2: Option<String>,
    #[serde(rename = "Email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "EmploymentDate", skip_serializing_if = "Option::is_none")]
    pub employment_date: Option<String>,
    #[serde(rename = "EmploymentForm", skip_serializing_if = "Option::is_none")]
    pub employment_form: Option<EmploymentForm>,
    #[serde(rename = "SalaryForm", skip_serializing_if = "Option::is_none")]
    pub salary_form: Option<SalaryForm>,
    #[serde(rename = "JobTitle", skip_serializing_if = "Option::is_none")]
    pub job_title: Option<String>,
    #[serde(rename = "PersonelType", skip_serializing_if = "Option::is_none")]
    pub personel_type: Option<PersonelType>,
    #[serde(rename = "ScheduleId", skip_serializing_if = "Option::is_none")]
    pub schedule_id: Option<String>,
    #[serde(rename = "ForaType", skip_serializing_if = "Option::is_none")]
    pub fora_type: Option<ForaType>,
    #[serde(rename = "MonthlySalary", skip_serializing_if = "Option::is_none")]
    pub monthly_salary: Option<String>,
    #[serde(rename = "HourlyPay", skip_serializing_if = "Option::is_none")]
    pub hourly_pay: Option<String>,
    #[serde(rename = "TaxAllowance", skip_serializing_if = "Option::is_none")]
    pub tax_allowance: Option<TaxAllowance>,
    #[serde(rename = "TaxTable", skip_serializing_if = "Option::is_none")]
    pub tax_table: Option<String>,
    #[serde(rename = "TaxColumn", skip_serializing_if = "Option::is_none")]
    pub tax_column: Option<i32>,
    #[serde(
        rename = "AutoNonRecurringTax",
        skip_serializing_if = "Option::is_none"
    )]
    pub auto_non_recurring_tax: Option<bool>,
    #[serde(rename = "NonRecurringTax", skip_serializing_if = "Option::is_none")]
    pub non_recurring_tax: Option<String>,
    #[serde(rename = "Inactive", skip_serializing_if = "Option::is_none")]
    pub inactive: Option<bool>,
    #[serde(rename = "ClearingNo", skip_serializing_if = "Option::is_none")]
    pub clearing_no: Option<String>,
    #[serde(rename = "BankAccountNo", skip_serializing_if = "Option::is_none")]
    pub bank_account_no: Option<String>,
    #[serde(rename = "EmployedTo", skip_serializing_if = "Option::is_none")]
    pub employed_to: Option<String>,
    #[serde(rename = "AverageWeeklyHours", skip_serializing_if = "Option::is_none")]
    pub average_weekly_hours: Option<String>,
    #[serde(rename = "AverageHourlyWage", skip_serializing_if = "Option::is_none")]
    pub average_hourly_wage: Option<String>,
    #[serde(rename = "DatedWages", skip_serializing_if = "Option::is_none")]
    pub dated_wages: Option<Vec<crate::http::models::EmployeeDatedWage>>,
    #[serde(rename = "DatedSchedules", skip_serializing_if = "Option::is_none")]
    pub dated_schedules: Option<Vec<crate::http::models::EmployeeDatedSchedule>>,
    #[serde(rename = "@url", skip_serializing_if = "Option::is_none")]
    pub at_url: Option<String>,
}

impl EmployeeListItem {
    pub fn new() -> EmployeeListItem {
        EmployeeListItem {
            employee_id: None,
            personal_identity_number: None,
            first_name: None,
            last_name: None,
            full_name: None,
            address1: None,
            address2: None,
            post_code: None,
            city: None,
            country: None,
            phone1: None,
            phone2: None,
            email: None,
            employment_date: None,
            employment_form: None,
            salary_form: None,
            job_title: None,
            personel_type: None,
            schedule_id: None,
            fora_type: None,
            monthly_salary: None,
            hourly_pay: None,
            tax_allowance: None,
            tax_table: None,
            tax_column: None,
            auto_non_recurring_tax: None,
            non_recurring_tax: None,
            inactive: None,
            clearing_no: None,
            bank_account_no: None,
            employed_to: None,
            average_weekly_hours: None,
            average_hourly_wage: None,
            dated_wages: None,
            dated_schedules: None,
            at_url: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EmploymentForm {
    #[serde(rename = "TV")]
    Tv,
    #[serde(rename = "PRO")]
    Pro,
    #[serde(rename = "TID")]
    Tid,
    #[serde(rename = "SVT")]
    Svt,
    #[serde(rename = "VIK")]
    Vik,
    #[serde(rename = "PRJ")]
    Prj,
    #[serde(rename = "PRA")]
    Pra,
    #[serde(rename = "FER")]
    Fer,
    #[serde(rename = "SES")]
    Ses,
    #[serde(rename = "NEJ")]
    Nej,
}

impl Default for EmploymentForm {
    fn default() -> EmploymentForm {
        Self::Tv
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SalaryForm {
    #[serde(rename = "MAN")]
    Man,
    #[serde(rename = "TIM")]
    Tim,
}

impl Default for SalaryForm {
    fn default() -> SalaryForm {
        Self::Man
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PersonelType {
    #[serde(rename = "TJM")]
    Tjm,
    #[serde(rename = "ARB")]
    Arb,
}

impl Default for PersonelType {
    fn default() -> PersonelType {
        Self::Tjm
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ForaType {
    #[serde(rename = "A")]
    A,
    #[serde(rename = "A51")]
    A51,
    #[serde(rename = "A52")]
    A52,
    #[serde(rename = "A53")]
    A53,
    #[serde(rename = "A54")]
    A54,
    #[serde(rename = "A55")]
    A55,
    #[serde(rename = "A56")]
    A56,
    #[serde(rename = "A57")]
    A57,
    #[serde(rename = "A58")]
    A58,
    #[serde(rename = "A59")]
    A59,
    #[serde(rename = "A60")]
    A60,
    #[serde(rename = "A61")]
    A61,
    #[serde(rename = "A62")]
    A62,
    #[serde(rename = "A63")]
    A63,
    #[serde(rename = "A64")]
    A64,
    #[serde(rename = "A65")]
    A65,
    #[serde(rename = "A66")]
    A66,
    #[serde(rename = "A67")]
    A67,
    #[serde(rename = "A68")]
    A68,
    #[serde(rename = "A69")]
    A69,
    #[serde(rename = "A70")]
    A70,
    #[serde(rename = "A71")]
    A71,
    #[serde(rename = "A72")]
    A72,
    #[serde(rename = "A73")]
    A73,
    #[serde(rename = "A74")]
    A74,
    #[serde(rename = "A75")]
    A75,
    #[serde(rename = "A76")]
    A76,
    #[serde(rename = "A77")]
    A77,
    #[serde(rename = "A78")]
    A78,
    #[serde(rename = "A79")]
    A79,
    #[serde(rename = "A80")]
    A80,
    #[serde(rename = "A81")]
    A81,
    #[serde(rename = "A82")]
    A82,
    #[serde(rename = "A83")]
    A83,
    #[serde(rename = "A84")]
    A84,
    #[serde(rename = "A85")]
    A85,
    #[serde(rename = "A86")]
    A86,
    #[serde(rename = "A3")]
    A3,
    #[serde(rename = "A91")]
    A91,
    #[serde(rename = "A92")]
    A92,
    #[serde(rename = "A93")]
    A93,
    #[serde(rename = "A11")]
    A11,
    #[serde(rename = "A12")]
    A12,
    #[serde(rename = "A13")]
    A13,
    #[serde(rename = "A14")]
    A14,
    #[serde(rename = "A15")]
    A15,
    #[serde(rename = "A16")]
    A16,
    #[serde(rename = "A17")]
    A17,
    #[serde(rename = "A18")]
    A18,
    #[serde(rename = "A19")]
    A19,
    #[serde(rename = "A20")]
    A20,
    #[serde(rename = "A21")]
    A21,
    #[serde(rename = "A22")]
    A22,
    #[serde(rename = "A23")]
    A23,
    #[serde(rename = "A24")]
    A24,
    #[serde(rename = "A25")]
    A25,
    #[serde(rename = "A26")]
    A26,
    #[serde(rename = "A27")]
    A27,
    #[serde(rename = "A28")]
    A28,
    #[serde(rename = "A29")]
    A29,
    #[serde(rename = "A30")]
    A30,
    #[serde(rename = "A41")]
    A41,
    #[serde(rename = "A42")]
    A42,
    #[serde(rename = "A43")]
    A43,
    #[serde(rename = "A44")]
    A44,
    #[serde(rename = "A45")]
    A45,
    #[serde(rename = "A46")]
    A46,
    #[serde(rename = "A47")]
    A47,
    #[serde(rename = "A48")]
    A48,
    #[serde(rename = "T")]
    T,
    #[serde(rename = "T6")]
    T6,
    #[serde(rename = "-")]
    Dash,
}

impl Default for ForaType {
    fn default() -> ForaType {
        Self::A
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TaxAllowance {
    #[serde(rename = "HUV")]
    Huv,
    #[serde(rename = "EXT")]
    Ext,
    #[serde(rename = "TMP")]
    Tmp,
    #[serde(rename = "STU")]
    Stu,
    #[serde(rename = "EJ")]
    Ej,
    #[serde(rename = "???")]
    QuestionMarkQuestionMarkQuestionMark,
}

impl Default for TaxAllowance {
    fn default() -> TaxAllowance {
        Self::Huv
    }
}
