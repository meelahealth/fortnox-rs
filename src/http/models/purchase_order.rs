/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PurchaseOrder {
    #[serde(rename = "deliveryDate", skip_serializing_if = "Option::is_none")]
    pub delivery_date: Option<String>,
    #[serde(rename = "note", skip_serializing_if = "Option::is_none")]
    pub note: Option<String>,
    #[serde(rename = "internalReference", skip_serializing_if = "Option::is_none")]
    pub internal_reference: Option<String>,
    #[serde(rename = "supplierName", skip_serializing_if = "Option::is_none")]
    pub supplier_name: Option<String>,
    #[serde(rename = "messageToSupplier", skip_serializing_if = "Option::is_none")]
    pub message_to_supplier: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    #[serde(rename = "orderDate")]
    pub order_date: String,
    #[serde(rename = "supplierNumber")]
    pub supplier_number: String,
    #[serde(rename = "rows", skip_serializing_if = "Option::is_none")]
    pub rows: Option<Vec<crate::http::models::PurchaseOrderRow>>,
    #[serde(rename = "stockPointId", skip_serializing_if = "Option::is_none")]
    pub stock_point_id: Option<uuid::Uuid>,
    #[serde(rename = "deliveryName")]
    pub delivery_name: String,
    #[serde(rename = "deliveryAddress")]
    pub delivery_address: String,
    #[serde(rename = "deliveryAddress2", skip_serializing_if = "Option::is_none")]
    pub delivery_address2: Option<String>,
    #[serde(rename = "deliveryZipCode")]
    pub delivery_zip_code: String,
    #[serde(rename = "deliveryCity")]
    pub delivery_city: String,
    #[serde(
        rename = "deliveryCountryCode",
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_country_code: Option<String>,
    #[serde(rename = "supplierAddress", skip_serializing_if = "Option::is_none")]
    pub supplier_address: Option<String>,
    #[serde(rename = "supplierAddress2", skip_serializing_if = "Option::is_none")]
    pub supplier_address2: Option<String>,
    #[serde(rename = "supplierPostCode", skip_serializing_if = "Option::is_none")]
    pub supplier_post_code: Option<String>,
    #[serde(rename = "supplierCity", skip_serializing_if = "Option::is_none")]
    pub supplier_city: Option<String>,
    #[serde(
        rename = "supplierCountryCode",
        skip_serializing_if = "Option::is_none"
    )]
    pub supplier_country_code: Option<String>,
    #[serde(rename = "paymentTermsCode")]
    pub payment_terms_code: String,
    #[serde(rename = "languageCode", skip_serializing_if = "Option::is_none")]
    pub language_code: Option<String>,
    #[serde(rename = "currencyCode")]
    pub currency_code: String,
    #[serde(rename = "ourReference", skip_serializing_if = "Option::is_none")]
    pub our_reference: Option<String>,
    #[serde(rename = "yourReference", skip_serializing_if = "Option::is_none")]
    pub your_reference: Option<String>,
    #[serde(rename = "confirmationEmail", skip_serializing_if = "Option::is_none")]
    pub confirmation_email: Option<String>,
    #[serde(rename = "projectId", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<String>,
    #[serde(rename = "costCenterCode", skip_serializing_if = "Option::is_none")]
    pub cost_center_code: Option<String>,
    #[serde(rename = "stockPointCode", skip_serializing_if = "Option::is_none")]
    pub stock_point_code: Option<String>,
    #[serde(
        rename = "totalReceivedQuantity",
        skip_serializing_if = "Option::is_none"
    )]
    pub total_received_quantity: Option<f32>,
    #[serde(rename = "voided", skip_serializing_if = "Option::is_none")]
    pub voided: Option<bool>,
    #[serde(rename = "responseState", skip_serializing_if = "Option::is_none")]
    pub response_state: Option<ResponseState>,
    #[serde(rename = "purchaseOrderState", skip_serializing_if = "Option::is_none")]
    pub purchase_order_state: Option<PurchaseOrderState>,
    #[serde(rename = "supplierEmail", skip_serializing_if = "Option::is_none")]
    pub supplier_email: Option<String>,
    #[serde(rename = "currencyRate")]
    pub currency_rate: f32,
    #[serde(rename = "currencyUnit", skip_serializing_if = "Option::is_none")]
    pub currency_unit: Option<i32>,
    #[serde(rename = "orderValue", skip_serializing_if = "Option::is_none")]
    pub order_value: Option<f32>,
    #[serde(rename = "manuallyCompleted", skip_serializing_if = "Option::is_none")]
    pub manually_completed: Option<bool>,
    #[serde(rename = "purchaseType", skip_serializing_if = "Option::is_none")]
    pub purchase_type: Option<PurchaseType>,
    #[serde(rename = "customerId", skip_serializing_if = "Option::is_none")]
    pub customer_id: Option<String>,
    #[serde(rename = "customerNumber", skip_serializing_if = "Option::is_none")]
    pub customer_number: Option<String>,
    #[serde(rename = "customerName", skip_serializing_if = "Option::is_none")]
    pub customer_name: Option<String>,
    #[serde(rename = "orderValueInSEK", skip_serializing_if = "Option::is_none")]
    pub order_value_in_sek: Option<f32>,
    #[serde(rename = "supplier", skip_serializing_if = "Option::is_none")]
    pub supplier: Option<String>,
    #[serde(
        rename = "translatedResponseState",
        skip_serializing_if = "Option::is_none"
    )]
    pub translated_response_state: Option<String>,
    #[serde(
        rename = "outboundDocumentReference",
        skip_serializing_if = "Option::is_none"
    )]
    pub outbound_document_reference: Option<Box<crate::http::models::DocumentReference>>,
}

impl PurchaseOrder {
    pub fn new(
        order_date: String,
        supplier_number: String,
        delivery_name: String,
        delivery_address: String,
        delivery_zip_code: String,
        delivery_city: String,
        payment_terms_code: String,
        currency_code: String,
        currency_rate: f32,
    ) -> PurchaseOrder {
        PurchaseOrder {
            delivery_date: None,
            note: None,
            internal_reference: None,
            supplier_name: None,
            message_to_supplier: None,
            id: None,
            order_date,
            supplier_number,
            rows: None,
            stock_point_id: None,
            delivery_name,
            delivery_address,
            delivery_address2: None,
            delivery_zip_code,
            delivery_city,
            delivery_country_code: None,
            supplier_address: None,
            supplier_address2: None,
            supplier_post_code: None,
            supplier_city: None,
            supplier_country_code: None,
            payment_terms_code,
            language_code: None,
            currency_code,
            our_reference: None,
            your_reference: None,
            confirmation_email: None,
            project_id: None,
            cost_center_code: None,
            stock_point_code: None,
            total_received_quantity: None,
            voided: None,
            response_state: None,
            purchase_order_state: None,
            supplier_email: None,
            currency_rate,
            currency_unit: None,
            order_value: None,
            manually_completed: None,
            purchase_type: None,
            customer_id: None,
            customer_number: None,
            customer_name: None,
            order_value_in_sek: None,
            supplier: None,
            translated_response_state: None,
            outbound_document_reference: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ResponseState {
    #[serde(rename = "NOT_SENT")]
    NotSent,
    #[serde(rename = "SENT")]
    Sent,
    #[serde(rename = "ACCEPTED_WITH_REQ_DLV_DATE")]
    AcceptedWithReqDlvDate,
    #[serde(rename = "ACCEPTED_WITH_CHANGED_DLV_DATE")]
    AcceptedWithChangedDlvDate,
    #[serde(rename = "PARTLY_ACCEPTED_WITH_REQ_DLV_DATE")]
    PartlyAcceptedWithReqDlvDate,
    #[serde(rename = "PARTLY_ACCEPTED_WITH_CHANGED_DLV_DATE")]
    PartlyAcceptedWithChangedDlvDate,
    #[serde(rename = "REJECTED")]
    Rejected,
}

impl Default for ResponseState {
    fn default() -> ResponseState {
        Self::NotSent
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PurchaseOrderState {
    #[serde(rename = "NOT_SENT")]
    NotSent,
    #[serde(rename = "SENT")]
    Sent,
    #[serde(rename = "SENT_NOT_REJECTED")]
    SentNotRejected,
    #[serde(rename = "DELAYED")]
    Delayed,
    #[serde(rename = "RECEIVED")]
    Received,
    #[serde(rename = "VOIDED")]
    Voided,
    #[serde(rename = "CURRENT")]
    Current,
    #[serde(rename = "ALL")]
    All,
}

impl Default for PurchaseOrderState {
    fn default() -> PurchaseOrderState {
        Self::NotSent
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PurchaseType {
    #[serde(rename = "WAREHOUSE")]
    Warehouse,
    #[serde(rename = "DROPSHIP")]
    Dropship,
}

impl Default for PurchaseType {
    fn default() -> PurchaseType {
        Self::Warehouse
    }
}
