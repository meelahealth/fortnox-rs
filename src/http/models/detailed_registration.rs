/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DetailedRegistration {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    #[serde(rename = "costCenter", skip_serializing_if = "Option::is_none")]
    pub cost_center: Option<Box<crate::http::models::TrCostCenter>>,
    #[serde(rename = "customer", skip_serializing_if = "Option::is_none")]
    pub customer: Option<Box<crate::http::models::TrCustomer>>,
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<Box<crate::http::models::TrProject>>,
    #[serde(rename = "service", skip_serializing_if = "Option::is_none")]
    pub service: Option<Box<crate::http::models::TrItem>>,
    #[serde(rename = "registrationCode")]
    pub registration_code: Box<crate::http::models::RegistrationCode>,
    #[serde(rename = "workedDate")]
    pub worked_date: String,
    #[serde(rename = "workedHours", skip_serializing_if = "Option::is_none")]
    pub worked_hours: Option<f32>,
    #[serde(rename = "chargeHours", skip_serializing_if = "Option::is_none")]
    pub charge_hours: Option<f32>,
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<String>,
    #[serde(rename = "stopTime", skip_serializing_if = "Option::is_none")]
    pub stop_time: Option<String>,
    #[serde(rename = "invoiceText", skip_serializing_if = "Option::is_none")]
    pub invoice_text: Option<String>,
    #[serde(rename = "note", skip_serializing_if = "Option::is_none")]
    pub note: Option<String>,
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    #[serde(rename = "updatedBy", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    #[serde(rename = "invoiceBasisId", skip_serializing_if = "Option::is_none")]
    pub invoice_basis_id: Option<i64>,
    #[serde(rename = "nonInvoiceable", skip_serializing_if = "Option::is_none")]
    pub non_invoiceable: Option<bool>,
    #[serde(rename = "childId", skip_serializing_if = "Option::is_none")]
    pub child_id: Option<uuid::Uuid>,
    #[serde(rename = "createdTime", skip_serializing_if = "Option::is_none")]
    pub created_time: Option<String>,
    #[serde(rename = "unitCost", skip_serializing_if = "Option::is_none")]
    pub unit_cost: Option<f32>,
    #[serde(rename = "unitPrice", skip_serializing_if = "Option::is_none")]
    pub unit_price: Option<f32>,
    #[serde(rename = "documentId", skip_serializing_if = "Option::is_none")]
    pub document_id: Option<i64>,
    #[serde(rename = "documentType", skip_serializing_if = "Option::is_none")]
    pub document_type: Option<DocumentType>,
}

impl DetailedRegistration {
    pub fn new(
        registration_code: crate::http::models::RegistrationCode,
        worked_date: String,
    ) -> DetailedRegistration {
        DetailedRegistration {
            id: None,
            cost_center: None,
            customer: None,
            project: None,
            service: None,
            registration_code: Box::new(registration_code),
            worked_date,
            worked_hours: None,
            charge_hours: None,
            start_time: None,
            stop_time: None,
            invoice_text: None,
            note: None,
            user_id: None,
            created_by: None,
            updated_by: None,
            invoice_basis_id: None,
            non_invoiceable: None,
            child_id: None,
            created_time: None,
            unit_cost: None,
            unit_price: None,
            document_id: None,
            document_type: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DocumentType {
    #[serde(rename = "order")]
    Order,
    #[serde(rename = "invoice")]
    Invoice,
}

impl Default for DocumentType {
    fn default() -> DocumentType {
        Self::Order
    }
}
