/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Customer {
    #[serde(rename = "@url", skip_serializing_if = "Option::is_none")]
    pub at_url: Option<String>,
    #[serde(rename = "Address1", skip_serializing_if = "Option::is_none")]
    pub address1: Option<String>,
    #[serde(rename = "Address2", skip_serializing_if = "Option::is_none")]
    pub address2: Option<String>,
    #[serde(rename = "City", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    #[serde(rename = "Country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    #[serde(rename = "Comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "Currency", skip_serializing_if = "Option::is_none")]
    pub currency: Option<String>,
    #[serde(rename = "CostCenter", skip_serializing_if = "Option::is_none")]
    pub cost_center: Option<String>,
    #[serde(rename = "CountryCode", skip_serializing_if = "Option::is_none")]
    pub country_code: Option<String>,
    #[serde(rename = "Active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(rename = "CustomerNumber", skip_serializing_if = "Option::is_none")]
    pub customer_number: Option<String>,
    #[serde(
        rename = "DefaultDeliveryTypes",
        skip_serializing_if = "Option::is_none"
    )]
    pub default_delivery_types: Option<Box<crate::http::models::CustomerDefaultDeliveryTypes>>,
    #[serde(rename = "DefaultTemplates", skip_serializing_if = "Option::is_none")]
    pub default_templates: Option<Box<crate::http::models::CustomerDefaultTemplates>>,
    #[serde(rename = "DeliveryAddress1", skip_serializing_if = "Option::is_none")]
    pub delivery_address1: Option<String>,
    #[serde(rename = "DeliveryAddress2", skip_serializing_if = "Option::is_none")]
    pub delivery_address2: Option<String>,
    #[serde(rename = "DeliveryCity", skip_serializing_if = "Option::is_none")]
    pub delivery_city: Option<String>,
    #[serde(rename = "DeliveryCountry", skip_serializing_if = "Option::is_none")]
    pub delivery_country: Option<String>,
    #[serde(
        rename = "DeliveryCountryCode",
        skip_serializing_if = "Option::is_none"
    )]
    pub delivery_country_code: Option<String>,
    #[serde(rename = "DeliveryFax", skip_serializing_if = "Option::is_none")]
    pub delivery_fax: Option<String>,
    #[serde(rename = "DeliveryName", skip_serializing_if = "Option::is_none")]
    pub delivery_name: Option<String>,
    #[serde(rename = "DeliveryPhone1", skip_serializing_if = "Option::is_none")]
    pub delivery_phone1: Option<String>,
    #[serde(rename = "DeliveryPhone2", skip_serializing_if = "Option::is_none")]
    pub delivery_phone2: Option<String>,
    #[serde(rename = "DeliveryZipCode", skip_serializing_if = "Option::is_none")]
    pub delivery_zip_code: Option<String>,
    #[serde(rename = "Email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "EmailInvoice", skip_serializing_if = "Option::is_none")]
    pub email_invoice: Option<String>,
    #[serde(rename = "EmailInvoiceBCC", skip_serializing_if = "Option::is_none")]
    pub email_invoice_bcc: Option<String>,
    #[serde(rename = "EmailInvoiceCC", skip_serializing_if = "Option::is_none")]
    pub email_invoice_cc: Option<String>,
    #[serde(rename = "EmailOffer", skip_serializing_if = "Option::is_none")]
    pub email_offer: Option<String>,
    #[serde(rename = "EmailOfferBCC", skip_serializing_if = "Option::is_none")]
    pub email_offer_bcc: Option<String>,
    #[serde(rename = "EmailOfferCC", skip_serializing_if = "Option::is_none")]
    pub email_offer_cc: Option<String>,
    #[serde(rename = "EmailOrder", skip_serializing_if = "Option::is_none")]
    pub email_order: Option<String>,
    #[serde(rename = "EmailOrderBCC", skip_serializing_if = "Option::is_none")]
    pub email_order_bcc: Option<String>,
    #[serde(rename = "EmailOrderCC", skip_serializing_if = "Option::is_none")]
    pub email_order_cc: Option<String>,
    #[serde(rename = "ExternalReference", skip_serializing_if = "Option::is_none")]
    pub external_reference: Option<String>,
    #[serde(rename = "Fax", skip_serializing_if = "Option::is_none")]
    pub fax: Option<String>,
    #[serde(rename = "GLN", skip_serializing_if = "Option::is_none")]
    pub gln: Option<String>,
    #[serde(rename = "GLNDelivery", skip_serializing_if = "Option::is_none")]
    pub gln_delivery: Option<String>,
    #[serde(
        rename = "InvoiceAdministrationFee",
        skip_serializing_if = "Option::is_none"
    )]
    pub invoice_administration_fee: Option<String>,
    #[serde(rename = "InvoiceDiscount", skip_serializing_if = "Option::is_none")]
    pub invoice_discount: Option<f64>,
    #[serde(rename = "InvoiceFreight", skip_serializing_if = "Option::is_none")]
    pub invoice_freight: Option<String>,
    #[serde(rename = "InvoiceRemark", skip_serializing_if = "Option::is_none")]
    pub invoice_remark: Option<String>,
    #[serde(rename = "Name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "OrganisationNumber", skip_serializing_if = "Option::is_none")]
    pub organisation_number: Option<String>,
    #[serde(rename = "OurReference", skip_serializing_if = "Option::is_none")]
    pub our_reference: Option<String>,
    #[serde(rename = "Phone1", skip_serializing_if = "Option::is_none")]
    pub phone1: Option<String>,
    #[serde(rename = "Phone2", skip_serializing_if = "Option::is_none")]
    pub phone2: Option<String>,
    #[serde(rename = "PriceList", skip_serializing_if = "Option::is_none")]
    pub price_list: Option<String>,
    #[serde(rename = "Project", skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    #[serde(rename = "SalesAccount", skip_serializing_if = "Option::is_none")]
    pub sales_account: Option<String>,
    #[serde(
        rename = "ShowPriceVATIncluded",
        skip_serializing_if = "Option::is_none"
    )]
    pub show_price_vat_included: Option<bool>,
    #[serde(rename = "TermsOfDelivery", skip_serializing_if = "Option::is_none")]
    pub terms_of_delivery: Option<String>,
    #[serde(rename = "TermsOfPayment", skip_serializing_if = "Option::is_none")]
    pub terms_of_payment: Option<String>,
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<RHashType>,
    #[serde(rename = "VATNumber", skip_serializing_if = "Option::is_none")]
    pub vat_number: Option<String>,
    #[serde(rename = "VATType", skip_serializing_if = "Option::is_none")]
    pub vat_type: Option<VatType>,
    #[serde(rename = "VisitingAddress", skip_serializing_if = "Option::is_none")]
    pub visiting_address: Option<String>,
    #[serde(rename = "VisitingCity", skip_serializing_if = "Option::is_none")]
    pub visiting_city: Option<String>,
    #[serde(rename = "VisitingCountry", skip_serializing_if = "Option::is_none")]
    pub visiting_country: Option<String>,
    #[serde(
        rename = "VisitingCountryCode",
        skip_serializing_if = "Option::is_none"
    )]
    pub visiting_country_code: Option<String>,
    #[serde(rename = "VisitingZipCode", skip_serializing_if = "Option::is_none")]
    pub visiting_zip_code: Option<String>,
    #[serde(rename = "WayOfDelivery", skip_serializing_if = "Option::is_none")]
    pub way_of_delivery: Option<String>,
    #[serde(rename = "WWW", skip_serializing_if = "Option::is_none")]
    pub www: Option<String>,
    #[serde(rename = "YourReference", skip_serializing_if = "Option::is_none")]
    pub your_reference: Option<String>,
    #[serde(rename = "ZipCode", skip_serializing_if = "Option::is_none")]
    pub zip_code: Option<String>,
}

impl Customer {
    pub fn new() -> Customer {
        Customer {
            at_url: None,
            address1: None,
            address2: None,
            city: None,
            country: None,
            comments: None,
            currency: None,
            cost_center: None,
            country_code: None,
            active: None,
            customer_number: None,
            default_delivery_types: None,
            default_templates: None,
            delivery_address1: None,
            delivery_address2: None,
            delivery_city: None,
            delivery_country: None,
            delivery_country_code: None,
            delivery_fax: None,
            delivery_name: None,
            delivery_phone1: None,
            delivery_phone2: None,
            delivery_zip_code: None,
            email: None,
            email_invoice: None,
            email_invoice_bcc: None,
            email_invoice_cc: None,
            email_offer: None,
            email_offer_bcc: None,
            email_offer_cc: None,
            email_order: None,
            email_order_bcc: None,
            email_order_cc: None,
            external_reference: None,
            fax: None,
            gln: None,
            gln_delivery: None,
            invoice_administration_fee: None,
            invoice_discount: None,
            invoice_freight: None,
            invoice_remark: None,
            name: None,
            organisation_number: None,
            our_reference: None,
            phone1: None,
            phone2: None,
            price_list: None,
            project: None,
            sales_account: None,
            show_price_vat_included: None,
            terms_of_delivery: None,
            terms_of_payment: None,
            r#type: None,
            vat_number: None,
            vat_type: None,
            visiting_address: None,
            visiting_city: None,
            visiting_country: None,
            visiting_country_code: None,
            visiting_zip_code: None,
            way_of_delivery: None,
            www: None,
            your_reference: None,
            zip_code: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "PRIVATE")]
    Private,
    #[serde(rename = "COMPANY")]
    Company,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Private
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VatType {
    #[serde(rename = "SEVAT")]
    Sevat,
    #[serde(rename = "SEREVERSEDVAT")]
    Sereversedvat,
    #[serde(rename = "EUREVERSEDVAT")]
    Eureversedvat,
    #[serde(rename = "EUVAT")]
    Euvat,
    #[serde(rename = "EXPORT")]
    Export,
}

impl Default for VatType {
    fn default() -> VatType {
        Self::Sevat
    }
}
