/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::http::apis::ResponseContent;

/// struct for passing parameters to the method [`create_contracts_resource`]
#[derive(Clone, Debug, Default)]
pub struct CreateContractsResourceParams {
    /// contract to create
    pub contract: Option<crate::http::models::ContractWrap>,
}

/// struct for passing parameters to the method [`createinvoice`]
#[derive(Clone, Debug, Default)]
pub struct CreateinvoiceParams {
    /// identifies the contract
    pub document_number: String,
}

/// struct for passing parameters to the method [`finish`]
#[derive(Clone, Debug, Default)]
pub struct FinishParams {
    /// identifies the contract
    pub document_number: String,
}

/// struct for passing parameters to the method [`get_contracts_resource`]
#[derive(Clone, Debug, Default)]
pub struct GetContractsResourceParams {
    /// identifies the contract
    pub document_number: String,
}

/// struct for passing parameters to the method [`increaseinvoicecount`]
#[derive(Clone, Debug, Default)]
pub struct IncreaseinvoicecountParams {
    /// identifies the contract
    pub document_number: String,
}

/// struct for passing parameters to the method [`list_contracts_resource`]
#[derive(Clone, Debug, Default)]
pub struct ListContractsResourceParams {
    /// possibility to filter contracts
    pub filter: Option<String>,
}

/// struct for passing parameters to the method [`update_contracts_resource`]
#[derive(Clone, Debug, Default)]
pub struct UpdateContractsResourceParams {
    /// identifies the contract
    pub document_number: String,
    /// contract to update
    pub contract: Option<crate::http::models::ContractWrap>,
}

/// struct for typed errors of method [`create_contracts_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateContractsResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`createinvoice`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateinvoiceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`finish`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FinishError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_contracts_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetContractsResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`increaseinvoicecount`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IncreaseinvoicecountError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_contracts_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListContractsResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_contracts_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateContractsResourceError {
    UnknownValue(serde_json::Value),
}

pub async fn create_contracts_resource(
    configuration: &configuration::Configuration,
    params: CreateContractsResourceParams,
) -> Result<crate::http::models::ContractWrap, Error<CreateContractsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let contract = params.contract;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/contracts/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&contract);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateContractsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn createinvoice(
    configuration: &configuration::Configuration,
    params: CreateinvoiceParams,
) -> Result<crate::http::models::InvoiceWrap, Error<CreateinvoiceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/contracts/{DocumentNumber}/createinvoice",
        local_var_configuration.base_path,
        DocumentNumber = crate::http::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateinvoiceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn finish(
    configuration: &configuration::Configuration,
    params: FinishParams,
) -> Result<crate::http::models::ContractWrap, Error<FinishError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/contracts/{DocumentNumber}/finish",
        local_var_configuration.base_path,
        DocumentNumber = crate::http::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FinishError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_contracts_resource(
    configuration: &configuration::Configuration,
    params: GetContractsResourceParams,
) -> Result<crate::http::models::ContractWrap, Error<GetContractsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/contracts/{DocumentNumber}",
        local_var_configuration.base_path,
        DocumentNumber = crate::http::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetContractsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn increaseinvoicecount(
    configuration: &configuration::Configuration,
    params: IncreaseinvoicecountParams,
) -> Result<crate::http::models::ContractWrap, Error<IncreaseinvoicecountError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/contracts/{DocumentNumber}/increaseinvoicecount",
        local_var_configuration.base_path,
        DocumentNumber = crate::http::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<IncreaseinvoicecountError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_contracts_resource(
    configuration: &configuration::Configuration,
    params: ListContractsResourceParams,
) -> Result<crate::http::models::ContractListItemList, Error<ListContractsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let filter = params.filter;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/contracts/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListContractsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Note that there are two approaches for updating the rows on a contract.   If RowId is not specified on any row, the rows will be mapped and updated in the order in which they are set in the array. All rows that should remain on the contract needs to be provided.   If RowId is specified on one or more rows the following goes: Corresponding row with that id will be updated. The rows without RowId will be interpreted as new rows. If a row should not be updated but remain on the contract then specify only RowId like { \"RowId\": 123 }, otherwise it will be removed. Note that new RowIds are generated for all rows every time a contract is updated.
pub async fn update_contracts_resource(
    configuration: &configuration::Configuration,
    params: UpdateContractsResourceParams,
) -> Result<crate::http::models::ContractWrap, Error<UpdateContractsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;
    let contract = params.contract;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/contracts/{DocumentNumber}",
        local_var_configuration.base_path,
        DocumentNumber = crate::http::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&contract);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateContractsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
