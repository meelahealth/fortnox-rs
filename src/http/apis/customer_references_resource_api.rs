/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::http::apis::ResponseContent;

/// struct for passing parameters to the method [`create_customer_references_resource`]
#[derive(Clone, Debug, Default)]
pub struct CreateCustomerReferencesResourceParams {
    /// customer reference row to create
    pub customer_reference_row:
        Option<crate::http::models::CustomerReferenceCustomerReferenceRowWrap>,
}

/// struct for passing parameters to the method [`get_customer_references_resource`]
#[derive(Clone, Debug, Default)]
pub struct GetCustomerReferencesResourceParams {
    /// identifies the customer reference row
    pub customer_reference_row_id: String,
}

/// struct for passing parameters to the method [`list_customer_references_resource`]
#[derive(Clone, Debug, Default)]
pub struct ListCustomerReferencesResourceParams {
    /// possibility to filter by customer number
    pub customer: Option<String>,
}

/// struct for passing parameters to the method [`remove_customer_references_resource`]
#[derive(Clone, Debug, Default)]
pub struct RemoveCustomerReferencesResourceParams {
    /// identifies the customer reference row
    pub customer_reference_row_id: String,
}

/// struct for passing parameters to the method [`update_customer_references_resource`]
#[derive(Clone, Debug, Default)]
pub struct UpdateCustomerReferencesResourceParams {
    /// identifies the customer reference row
    pub customer_reference_row_id: String,
    /// customer reference row to update
    pub customer_reference_row:
        Option<crate::http::models::CustomerReferenceCustomerReferenceRowWrap>,
}

/// struct for typed errors of method [`create_customer_references_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCustomerReferencesResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_customer_references_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomerReferencesResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_customer_references_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListCustomerReferencesResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`remove_customer_references_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveCustomerReferencesResourceError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_customer_references_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCustomerReferencesResourceError {
    UnknownValue(serde_json::Value),
}

/// </p>  <p>The created customer reference row will be returned if everything succeeded, if there was any problems an error will be returned.</p>
pub async fn create_customer_references_resource(
    configuration: &configuration::Configuration,
    params: CreateCustomerReferencesResourceParams,
) -> Result<crate::http::models::CustomerReferenceWrap, Error<CreateCustomerReferencesResourceError>>
{
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer_reference_row = params.customer_reference_row;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/customerreferences/",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&customer_reference_row);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateCustomerReferencesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// </p>  <p>You need to supply the unique customer reference row id that was returned when the customer reference row was created or retrieved from the list of customer reference rows.</p>
pub async fn get_customer_references_resource(
    configuration: &configuration::Configuration,
    params: GetCustomerReferencesResourceParams,
) -> Result<crate::http::models::CustomerReferenceWrap, Error<GetCustomerReferencesResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer_reference_row_id = params.customer_reference_row_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/customerreferences/{CustomerReferenceRowId}",
        local_var_configuration.base_path,
        CustomerReferenceRowId = crate::http::apis::urlencode(customer_reference_row_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCustomerReferencesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// </p>
pub async fn list_customer_references_resource(
    configuration: &configuration::Configuration,
    params: ListCustomerReferencesResourceParams,
) -> Result<crate::http::models::CustomerReferenceWrap, Error<ListCustomerReferencesResourceError>>
{
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer = params.customer;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/customerreferences/",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = customer {
        local_var_req_builder =
            local_var_req_builder.query(&[("customer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListCustomerReferencesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// </p>  <p>Deletes the customer reference row permanently. If everything succeeded the response will be of the type 204, No content and the response body will be empty.</p>  <p>If there was any problems an error will be returned.</p>  <p>You need to supply the unique customer reference row id of the customer reference row that you want to delete.</p>
pub async fn remove_customer_references_resource(
    configuration: &configuration::Configuration,
    params: RemoveCustomerReferencesResourceParams,
) -> Result<(), Error<RemoveCustomerReferencesResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer_reference_row_id = params.customer_reference_row_id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/customerreferences/{CustomerReferenceRowId}",
        local_var_configuration.base_path,
        CustomerReferenceRowId = crate::http::apis::urlencode(customer_reference_row_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<RemoveCustomerReferencesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// </p>  <p>The updated customer reference row will be returned if everything succeeded, if there was any problems an error will be returned.</p>  <p>You need to supply the unique customer reference row id of the customer reference row that you want to update.</p>  <p>Only the properties provided in the request body will be updated, properties not provided will be left unchanged.</p>  <p>CustomerNumber cannot be changed by this request.</p>
pub async fn update_customer_references_resource(
    configuration: &configuration::Configuration,
    params: UpdateCustomerReferencesResourceParams,
) -> Result<crate::http::models::CustomerWrap, Error<UpdateCustomerReferencesResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let customer_reference_row_id = params.customer_reference_row_id;
    let customer_reference_row = params.customer_reference_row;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/customerreferences/{CustomerReferenceRowId}",
        local_var_configuration.base_path,
        CustomerReferenceRowId = crate::http::apis::urlencode(customer_reference_row_id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&customer_reference_row);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateCustomerReferencesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
