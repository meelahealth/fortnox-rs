/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::http::apis::ResponseContent;

/// struct for passing parameters to the method [`approvalbookkeep`]
#[derive(Clone, Debug, Default)]
pub struct ApprovalbookkeepParams {
    /// identifies the invoice
    pub given_number: i32,
}

/// struct for passing parameters to the method [`approvalpayment`]
#[derive(Clone, Debug, Default)]
pub struct ApprovalpaymentParams {
    /// identifies the invoice
    pub given_number: i32,
}

/// struct for passing parameters to the method [`bookkeep_supplier_invoices_resource`]
#[derive(Clone, Debug, Default)]
pub struct BookkeepSupplierInvoicesResourceParams {
    /// identifies the invoice
    pub given_number: i32,
}

/// struct for passing parameters to the method [`cancel_supplier_invoices_resource`]
#[derive(Clone, Debug, Default)]
pub struct CancelSupplierInvoicesResourceParams {
    /// identifies the invoice
    pub given_number: i32,
}

/// struct for passing parameters to the method [`create_supplier_invoices_resource`]
#[derive(Clone, Debug, Default)]
pub struct CreateSupplierInvoicesResourceParams {
    /// supplier invoice to create
    pub supplier_invoice: Option<crate::http::models::SupplierInvoiceWrap>,
}

/// struct for passing parameters to the method [`credit_supplier_invoices_resource`]
#[derive(Clone, Debug, Default)]
pub struct CreditSupplierInvoicesResourceParams {
    /// identifies the invoice
    pub given_number: i32,
}

/// struct for passing parameters to the method [`get_supplier_invoices_resource`]
#[derive(Clone, Debug, Default)]
pub struct GetSupplierInvoicesResourceParams {
    /// identifies the invoice
    pub given_number: i32,
}

/// struct for passing parameters to the method [`list_supplier_invoices_resource`]
#[derive(Clone, Debug, Default)]
pub struct ListSupplierInvoicesResourceParams {
    /// possibility to filter supplier invoices
    pub filter: Option<String>,
}

/// struct for passing parameters to the method [`update_supplier_invoices_resource`]
#[derive(Clone, Debug, Default)]
pub struct UpdateSupplierInvoicesResourceParams {
    /// identifies the invoice
    pub given_number: i32,
    /// supplier invoice to update
    pub supplier_invoice: Option<crate::http::models::SupplierInvoiceWrap>,
}

/// struct for typed errors of method [`approvalbookkeep`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApprovalbookkeepError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`approvalpayment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApprovalpaymentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`bookkeep_supplier_invoices_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BookkeepSupplierInvoicesResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`cancel_supplier_invoices_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CancelSupplierInvoicesResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_supplier_invoices_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSupplierInvoicesResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`credit_supplier_invoices_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreditSupplierInvoicesResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_supplier_invoices_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSupplierInvoicesResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_supplier_invoices_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSupplierInvoicesResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_supplier_invoices_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSupplierInvoicesResourceError {
    UnknownValue(serde_json::Value),
}

pub async fn approvalbookkeep(
    configuration: &configuration::Configuration,
    params: ApprovalbookkeepParams,
) -> Result<crate::http::models::SupplierInvoiceWrap, Error<ApprovalbookkeepError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let given_number = params.given_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/supplierinvoices/{GivenNumber}/approvalbookkeep",
        local_var_configuration.base_path,
        GivenNumber = given_number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApprovalbookkeepError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn approvalpayment(
    configuration: &configuration::Configuration,
    params: ApprovalpaymentParams,
) -> Result<crate::http::models::SupplierInvoiceWrap, Error<ApprovalpaymentError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let given_number = params.given_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/supplierinvoices/{GivenNumber}/approvalpayment",
        local_var_configuration.base_path,
        GivenNumber = given_number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ApprovalpaymentError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn bookkeep_supplier_invoices_resource(
    configuration: &configuration::Configuration,
    params: BookkeepSupplierInvoicesResourceParams,
) -> Result<crate::http::models::SupplierInvoiceWrap, Error<BookkeepSupplierInvoicesResourceError>>
{
    let local_var_configuration = configuration;

    // unbox the parameters
    let given_number = params.given_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/supplierinvoices/{GivenNumber}/bookkeep",
        local_var_configuration.base_path,
        GivenNumber = given_number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BookkeepSupplierInvoicesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn cancel_supplier_invoices_resource(
    configuration: &configuration::Configuration,
    params: CancelSupplierInvoicesResourceParams,
) -> Result<crate::http::models::SupplierInvoiceWrap, Error<CancelSupplierInvoicesResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let given_number = params.given_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/supplierinvoices/{GivenNumber}/cancel",
        local_var_configuration.base_path,
        GivenNumber = given_number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CancelSupplierInvoicesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_supplier_invoices_resource(
    configuration: &configuration::Configuration,
    params: CreateSupplierInvoicesResourceParams,
) -> Result<crate::http::models::SupplierInvoiceWrap, Error<CreateSupplierInvoicesResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let supplier_invoice = params.supplier_invoice;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/supplierinvoices/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&supplier_invoice);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateSupplierInvoicesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// The created credit invoice will be referenced in the property CreditReference.
pub async fn credit_supplier_invoices_resource(
    configuration: &configuration::Configuration,
    params: CreditSupplierInvoicesResourceParams,
) -> Result<crate::http::models::SupplierInvoiceWrap, Error<CreditSupplierInvoicesResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let given_number = params.given_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/supplierinvoices/{GivenNumber}/credit",
        local_var_configuration.base_path,
        GivenNumber = given_number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreditSupplierInvoicesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_supplier_invoices_resource(
    configuration: &configuration::Configuration,
    params: GetSupplierInvoicesResourceParams,
) -> Result<crate::http::models::SupplierInvoiceWrap, Error<GetSupplierInvoicesResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let given_number = params.given_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/supplierinvoices/{GivenNumber}",
        local_var_configuration.base_path,
        GivenNumber = given_number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSupplierInvoicesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_supplier_invoices_resource(
    configuration: &configuration::Configuration,
    params: ListSupplierInvoicesResourceParams,
) -> Result<
    crate::http::models::SupplierInvoiceListItemWrap,
    Error<ListSupplierInvoicesResourceError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let filter = params.filter;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/supplierinvoices/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListSupplierInvoicesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_supplier_invoices_resource(
    configuration: &configuration::Configuration,
    params: UpdateSupplierInvoicesResourceParams,
) -> Result<crate::http::models::SupplierInvoiceWrap, Error<UpdateSupplierInvoicesResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let given_number = params.given_number;
    let supplier_invoice = params.supplier_invoice;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/supplierinvoices/{GivenNumber}",
        local_var_configuration.base_path,
        GivenNumber = given_number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&supplier_invoice);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateSupplierInvoicesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
