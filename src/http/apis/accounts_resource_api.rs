/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::http::apis::ResponseContent;

/// struct for passing parameters to the method [`create_accounts_resource`]
#[derive(Clone, Debug, Default)]
pub struct CreateAccountsResourceParams {
    /// financial year to create account against
    pub financialyear: Option<i32>,
    /// account to create
    pub account_payload: Option<crate::http::models::AccountPayloadWrap>,
}

/// struct for passing parameters to the method [`get_accounts_resource`]
#[derive(Clone, Debug, Default)]
pub struct GetAccountsResourceParams {
    /// identifies the account
    pub number: i32,
}

/// struct for passing parameters to the method [`list_accounts_resource`]
#[derive(Clone, Debug, Default)]
pub struct ListAccountsResourceParams {
    pub lastmodified: Option<String>,
    pub sru: Option<i32>,
    /// field to sort returned list on
    pub sortby: Option<String>,
}

/// struct for passing parameters to the method [`update_accounts_resource`]
#[derive(Clone, Debug, Default)]
pub struct UpdateAccountsResourceParams {
    /// identifies the account
    pub number: i32,
    /// financial year to update account against
    pub financialyear: Option<i32>,
    /// account to update
    pub account_payload: Option<crate::http::models::AccountPayloadWrap>,
}

/// struct for typed errors of method [`create_accounts_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateAccountsResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_accounts_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAccountsResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_accounts_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAccountsResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_accounts_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateAccountsResourceError {
    UnknownValue(serde_json::Value),
}

/// The created account will be returned if everything succeeded, if there was any problems an error will be returned.
pub async fn create_accounts_resource(
    configuration: &configuration::Configuration,
    params: CreateAccountsResourceParams,
) -> Result<crate::http::models::AccountSingleItemWrap, Error<CreateAccountsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let financialyear = params.financialyear;
    let account_payload = params.account_payload;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/accounts/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = financialyear {
        local_var_req_builder =
            local_var_req_builder.query(&[("financialyear", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&account_payload);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateAccountsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieves the details of an account. You need to supply the unique account number that was returned when the account was created or retrieved from the list of accounts.
pub async fn get_accounts_resource(
    configuration: &configuration::Configuration,
    params: GetAccountsResourceParams,
) -> Result<crate::http::models::AccountSingleItemWrap, Error<GetAccountsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let number = params.number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/accounts/{Number}",
        local_var_configuration.base_path,
        Number = number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAccountsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// The accounts are returned sorted by account number with the lowest number appearing first.
pub async fn list_accounts_resource(
    configuration: &configuration::Configuration,
    params: ListAccountsResourceParams,
) -> Result<crate::http::models::AccountListItemWrap, Error<ListAccountsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let lastmodified = params.lastmodified;
    let sru = params.sru;
    let sortby = params.sortby;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/accounts/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = lastmodified {
        local_var_req_builder =
            local_var_req_builder.query(&[("lastmodified", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sru {
        local_var_req_builder = local_var_req_builder.query(&[("sru", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sortby {
        local_var_req_builder =
            local_var_req_builder.query(&[("sortby", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListAccountsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates the specified account with the values provided in the properties. Any property not provided will be left unchanged.  Note that even though the account number is writeable you can&acute;t change the number of an existing account.
pub async fn update_accounts_resource(
    configuration: &configuration::Configuration,
    params: UpdateAccountsResourceParams,
) -> Result<crate::http::models::AccountSingleItemWrap, Error<UpdateAccountsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let number = params.number;
    let financialyear = params.financialyear;
    let account_payload = params.account_payload;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/accounts/{Number}",
        local_var_configuration.base_path,
        Number = number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = financialyear {
        local_var_req_builder =
            local_var_req_builder.query(&[("financialyear", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&account_payload);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateAccountsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
