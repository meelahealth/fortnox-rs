/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::http::apis::ResponseContent;

/// struct for passing parameters to the method [`create_articles_resource_articles`]
#[derive(Clone, Debug, Default)]
pub struct CreateArticlesResourceArticlesParams {
    /// to create
    pub article: Option<crate::http::models::ArticleWrap>,
}

/// struct for passing parameters to the method [`get_articles_resource_articles`]
#[derive(Clone, Debug, Default)]
pub struct GetArticlesResourceArticlesParams {
    /// identifies the article
    pub article_number: i32,
}

/// struct for passing parameters to the method [`list_articles_resource_articles`]
#[derive(Clone, Debug, Default)]
pub struct ListArticlesResourceArticlesParams {
    /// possibility to filter supplier invoices
    pub filter: Option<String>,
}

/// struct for passing parameters to the method [`remove_articles_resource_articles`]
#[derive(Clone, Debug, Default)]
pub struct RemoveArticlesResourceArticlesParams {
    /// identifies the article
    pub article_number: i32,
}

/// struct for passing parameters to the method [`update_articles_resource_articles`]
#[derive(Clone, Debug, Default)]
pub struct UpdateArticlesResourceArticlesParams {
    /// identifies the article
    pub article_number: i32,
    /// to update
    pub article: Option<crate::http::models::ArticleWrap>,
}

/// struct for typed errors of method [`create_articles_resource_articles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateArticlesResourceArticlesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_articles_resource_articles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetArticlesResourceArticlesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_articles_resource_articles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListArticlesResourceArticlesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`remove_articles_resource_articles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveArticlesResourceArticlesError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_articles_resource_articles`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateArticlesResourceArticlesError {
    UnknownValue(serde_json::Value),
}

/// The created article will be returned if everything succeeded, if there was any problems an error will be returned.
pub async fn create_articles_resource_articles(
    configuration: &configuration::Configuration,
    params: CreateArticlesResourceArticlesParams,
) -> Result<crate::http::models::ArticleWrap, Error<CreateArticlesResourceArticlesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let article = params.article;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/articles", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&article);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::trace!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateArticlesResourceArticlesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieves the details of an article. You need to supply the unique article number that was returned when the article was created or retrieved from the list of articles.
pub async fn get_articles_resource_articles(
    configuration: &configuration::Configuration,
    params: GetArticlesResourceArticlesParams,
) -> Result<crate::http::models::ArticleWrap, Error<GetArticlesResourceArticlesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let article_number = params.article_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/articles/{ArticleNumber}",
        local_var_configuration.base_path,
        ArticleNumber = article_number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::trace!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetArticlesResourceArticlesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieves a list of articles. The articles are returned sorted by article number with the lowest number appearing first.
pub async fn list_articles_resource_articles(
    configuration: &configuration::Configuration,
    params: ListArticlesResourceArticlesParams,
) -> Result<crate::http::models::ArticleListItemList, Error<ListArticlesResourceArticlesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let filter = params.filter;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/articles", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::trace!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListArticlesResourceArticlesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// <p>Deletes the article permanently.</p>  <p>You need to supply the unique article number that was returned when the article was created or retrieved from the list of articles.</p>
pub async fn remove_articles_resource_articles(
    configuration: &configuration::Configuration,
    params: RemoveArticlesResourceArticlesParams,
) -> Result<(), Error<RemoveArticlesResourceArticlesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let article_number = params.article_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/articles/{ArticleNumber}",
        local_var_configuration.base_path,
        ArticleNumber = article_number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<RemoveArticlesResourceArticlesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates the specified article with the values provided in the properties. Any property not provided will be left unchanged.  You need to supply the unique article number that was returned when the article was created or retrieved from the list of articles.  Note that even though the article number is writeable you can not change the number of an existing article.
pub async fn update_articles_resource_articles(
    configuration: &configuration::Configuration,
    params: UpdateArticlesResourceArticlesParams,
) -> Result<crate::http::models::ArticleWrap, Error<UpdateArticlesResourceArticlesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let article_number = params.article_number;
    let article = params.article;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/articles/{ArticleNumber}",
        local_var_configuration.base_path,
        ArticleNumber = article_number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&article);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::trace!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateArticlesResourceArticlesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
