/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::http::apis::ResponseContent;

/// struct for passing parameters to the method [`create_tax_reductions_resource`]
#[derive(Clone, Debug, Default)]
pub struct CreateTaxReductionsResourceParams {
    /// to create
    pub tax_reduction: Option<crate::http::models::TaxReductionWrap>,
}

/// struct for passing parameters to the method [`get_tax_reductions_resource`]
#[derive(Clone, Debug, Default)]
pub struct GetTaxReductionsResourceParams {
    /// identifies the tax reduction
    pub id: i32,
}

/// struct for passing parameters to the method [`list_tax_reductions_resource`]
#[derive(Clone, Debug, Default)]
pub struct ListTaxReductionsResourceParams {
    /// possibility to filter tax reductions
    pub filter: Option<String>,
}

/// struct for passing parameters to the method [`remove_tax_reductions_resource`]
#[derive(Clone, Debug, Default)]
pub struct RemoveTaxReductionsResourceParams {
    /// identifies the tax reduction
    pub id: i32,
}

/// struct for passing parameters to the method [`update_tax_reductions_resource`]
#[derive(Clone, Debug, Default)]
pub struct UpdateTaxReductionsResourceParams {
    /// identifies the tax reduction
    pub id: i32,
    /// to update
    pub tax_reduction: Option<crate::http::models::TaxReductionWrap>,
}

/// struct for typed errors of method [`create_tax_reductions_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateTaxReductionsResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_tax_reductions_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTaxReductionsResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_tax_reductions_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListTaxReductionsResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`remove_tax_reductions_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveTaxReductionsResourceError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_tax_reductions_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateTaxReductionsResourceError {
    UnknownValue(serde_json::Value),
}

/// Note that different types of tax reduction, i.e. ROT, RUT, or Green Technology, applications work differently.  When creating an application for Green Technology, the field <em>TaxReductionAmounts</em> becomes mandatory as  it is used to determine how much of the asked amount is intended for which type of work. Similarly, the <em>AskedAmount</em>  field of the <em>TaxReduction</em> becomes optional, as it will always be considered to be equal to the sum of the <em>TaxReductionAmounts</em>.   For the other types, ROT and RUT, this field is not required and should be omitted.   Unlike earlier iterations of this endpoint, specifying the type of reduction for the provided <em>TaxReduction</em> (e.g. ROT, RUT, or Green)  is not necessary as this value will always be equal to the type set on the provided document instead.   This endpoint can raise a variety of validation errors, some of which are only relevant for Green Technology applications.  Those errors will always return an HTTP Code of 400 and include, but are not limited to, those shown below:   <table>      <caption>Errors that can be raised by this endpoint.</caption>      <tr>          <th>Error Code</th>          <th>Types</th>          <th>Description</th>          <th>Solution</th>      </tr>      <tr>          <td>2000600</td>          <td>ROT, RUT, GREEN</td>          <td>The provided Social Security Number is already in use for this document.</td>          <td>Verify that the Social Security Number is different from any other applicants already added.</td>      </tr>      <tr>          <td>2004217, 2004218</td>          <td>ROT, RUT, GREEN</td>          <td>The total asked amount of the application is either in an invalid format or is negative.</td>          <td>Verify that the <em>AskedAmount</em>-field is a positive number (0 is valid for Green Technology) and that it is an integer.</td>      </tr>      <tr>          <td>2004209</td>          <td>GREEN</td>          <td>The <em>WorkType</em>-field contains a work type that is not valid for the given type of reduction.</td>          <td>Ensure that the <em>WorkType</em> contains a valid type of work for Green Technology.</td>      </tr>      <tr>          <td>2004263</td>          <td>GREEN</td>          <td>The <em>TaxReductionAmounts</em>-field is missing for a Green Technology application.</td>          <td>Ensure that the field is included, that it is an array, and that each contained object denotes a specific type's asked amount.</td>      </tr>      <tr>          <td>2004262</td>          <td>GREEN</td>          <td>There are more than one object denoting the asked amount for the same type in the <em>TaxReductionAmounts</em>-field.</td>          <td>Ensure that there is only one object denoting the asked amount per type contained in the array.</td>      </tr>  </table>
pub async fn create_tax_reductions_resource(
    configuration: &configuration::Configuration,
    params: CreateTaxReductionsResourceParams,
) -> Result<crate::http::models::TaxReductionWrap, Error<CreateTaxReductionsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let tax_reduction = params.tax_reduction;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/taxreductions", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&tax_reduction);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateTaxReductionsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_tax_reductions_resource(
    configuration: &configuration::Configuration,
    params: GetTaxReductionsResourceParams,
) -> Result<crate::http::models::TaxReductionWrap, Error<GetTaxReductionsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/taxreductions/{Id}",
        local_var_configuration.base_path,
        Id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetTaxReductionsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_tax_reductions_resource(
    configuration: &configuration::Configuration,
    params: ListTaxReductionsResourceParams,
) -> Result<crate::http::models::TaxReductionListItemList, Error<ListTaxReductionsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let filter = params.filter;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/taxreductions", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListTaxReductionsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn remove_tax_reductions_resource(
    configuration: &configuration::Configuration,
    params: RemoveTaxReductionsResourceParams,
) -> Result<(), Error<RemoveTaxReductionsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/taxreductions/{Id}",
        local_var_configuration.base_path,
        Id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<RemoveTaxReductionsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_tax_reductions_resource(
    configuration: &configuration::Configuration,
    params: UpdateTaxReductionsResourceParams,
) -> Result<crate::http::models::TaxReductionWrap, Error<UpdateTaxReductionsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let tax_reduction = params.tax_reduction;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/taxreductions/{Id}",
        local_var_configuration.base_path,
        Id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&tax_reduction);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateTaxReductionsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
