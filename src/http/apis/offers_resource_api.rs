/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::http::apis::ResponseContent;

/// struct for passing parameters to the method [`cancel_offers_resource`]
#[derive(Clone, Debug, Default)]
pub struct CancelOffersResourceParams {
    /// identifies the offer
    pub document_number: String,
}

/// struct for passing parameters to the method [`create_offers_resource`]
#[derive(Clone, Debug, Default)]
pub struct CreateOffersResourceParams {
    /// to create
    pub offer: Option<crate::http::models::OfferWrap>,
}

/// struct for passing parameters to the method [`createorder`]
#[derive(Clone, Debug, Default)]
pub struct CreateorderParams {
    /// identifies the offer
    pub document_number: String,
}

/// struct for passing parameters to the method [`email_offers_resource`]
#[derive(Clone, Debug, Default)]
pub struct EmailOffersResourceParams {
    /// identifies the offer
    pub document_number: String,
}

/// struct for passing parameters to the method [`externalprint`]
#[derive(Clone, Debug, Default)]
pub struct ExternalprintParams {
    /// identifies the offer
    pub document_number: String,
}

/// struct for passing parameters to the method [`get_offers_resource`]
#[derive(Clone, Debug, Default)]
pub struct GetOffersResourceParams {
    /// identifies the offer
    pub document_number: String,
}

/// struct for passing parameters to the method [`list_offers_resource`]
#[derive(Clone, Debug, Default)]
pub struct ListOffersResourceParams {
    /// possibility to filter offers
    pub filter: Option<String>,
}

/// struct for passing parameters to the method [`preview_offers_resource`]
#[derive(Clone, Debug, Default)]
pub struct PreviewOffersResourceParams {
    /// identifies the offer
    pub document_number: String,
}

/// struct for passing parameters to the method [`print_offers_resource`]
#[derive(Clone, Debug, Default)]
pub struct PrintOffersResourceParams {
    /// identifies the offer
    pub document_number: String,
}

/// struct for passing parameters to the method [`update_offers_resource`]
#[derive(Clone, Debug, Default)]
pub struct UpdateOffersResourceParams {
    /// identifies the offer
    pub document_number: String,
    /// to update
    pub offer: Option<crate::http::models::OfferWrap>,
}

/// struct for typed errors of method [`cancel_offers_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CancelOffersResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_offers_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateOffersResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`createorder`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateorderError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`email_offers_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EmailOffersResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`externalprint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExternalprintError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_offers_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOffersResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_offers_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListOffersResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`preview_offers_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PreviewOffersResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`print_offers_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PrintOffersResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_offers_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateOffersResourceError {
    UnknownValue(serde_json::Value),
}

pub async fn cancel_offers_resource(
    configuration: &configuration::Configuration,
    params: CancelOffersResourceParams,
) -> Result<crate::http::models::OfferWrap, Error<CancelOffersResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/offers/{DocumentNumber}/cancel",
        local_var_configuration.base_path,
        DocumentNumber = crate::http::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::trace!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CancelOffersResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// An endpoint for creating an offer.   Should you have EasyVat enabled, it is mandatory to provide an account in the request should you use a custom VAT rate.   This endpoint can produce errors, some of which may only be relevant for EasyVat. Refer to the table below.  <table>  <caption>Errors that can be raised by this endpoint.</caption>    <tr>     <th>Error Code</th>     <th>HTTP Code</th>     <th>Description</th>     <th>Solution</th>    </tr>    <tr>     <td>2004167</td>     <td>400</td>     <td>An account must be provided when using a custom VAT rate and EasyVat has been enabled.</td>     <td>Supply each row which has a custom VAT rate with an account.</td>    </tr>  </table>
pub async fn create_offers_resource(
    configuration: &configuration::Configuration,
    params: CreateOffersResourceParams,
) -> Result<crate::http::models::OfferWrap, Error<CreateOffersResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let offer = params.offer;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/offers/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&offer);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::trace!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateOffersResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn createorder(
    configuration: &configuration::Configuration,
    params: CreateorderParams,
) -> Result<crate::http::models::OrderWrap, Error<CreateorderError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/offers/{DocumentNumber}/createorder",
        local_var_configuration.base_path,
        DocumentNumber = crate::http::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::trace!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateorderError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// You can use the properties in the EmailInformation to customize the e-mail message on each offer.
pub async fn email_offers_resource(
    configuration: &configuration::Configuration,
    params: EmailOffersResourceParams,
) -> Result<crate::http::models::OfferWrap, Error<EmailOffersResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/offers/{DocumentNumber}/email",
        local_var_configuration.base_path,
        DocumentNumber = crate::http::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::trace!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EmailOffersResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this endpoint to set offer as sent, without generating an offer.
pub async fn externalprint(
    configuration: &configuration::Configuration,
    params: ExternalprintParams,
) -> Result<crate::http::models::OfferWrap, Error<ExternalprintError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/offers/{DocumentNumber}/externalprint",
        local_var_configuration.base_path,
        DocumentNumber = crate::http::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::trace!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExternalprintError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_offers_resource(
    configuration: &configuration::Configuration,
    params: GetOffersResourceParams,
) -> Result<crate::http::models::OfferWrap, Error<GetOffersResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/offers/{DocumentNumber}",
        local_var_configuration.base_path,
        DocumentNumber = crate::http::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::trace!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetOffersResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_offers_resource(
    configuration: &configuration::Configuration,
    params: ListOffersResourceParams,
) -> Result<crate::http::models::OfferListItemList, Error<ListOffersResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let filter = params.filter;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/offers/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::trace!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListOffersResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// The difference between this and the print-endpoint is that property Sent is not set to TRUE.
pub async fn preview_offers_resource(
    configuration: &configuration::Configuration,
    params: PreviewOffersResourceParams,
) -> Result<String, Error<PreviewOffersResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/offers/{DocumentNumber}/preview",
        local_var_configuration.base_path,
        DocumentNumber = crate::http::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::trace!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PreviewOffersResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn print_offers_resource(
    configuration: &configuration::Configuration,
    params: PrintOffersResourceParams,
) -> Result<String, Error<PrintOffersResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/offers/{DocumentNumber}/print",
        local_var_configuration.base_path,
        DocumentNumber = crate::http::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::trace!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PrintOffersResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Note that there are two approaches for updating the rows on an offer.   If RowId is not specified on any row, the rows will be mapped and updated in the order in which they are set in the array. All rows that should remain on the offer needs to be provided.   If RowId is specified on one or more rows the following goes: Corresponding row with that id will be updated. The rows without RowId will be interpreted as new rows. If a row should not be updated but remain on the offer then specify only RowId like { \"RowId\": 123 }, otherwise it will be removed. Note that new RowIds are generated for all rows every time an offer is updated.
pub async fn update_offers_resource(
    configuration: &configuration::Configuration,
    params: UpdateOffersResourceParams,
) -> Result<crate::http::models::OfferWrap, Error<UpdateOffersResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;
    let offer = params.offer;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/offers/{DocumentNumber}",
        local_var_configuration.base_path,
        DocumentNumber = crate::http::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&offer);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::trace!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateOffersResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
