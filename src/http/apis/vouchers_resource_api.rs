/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::http::apis::ResponseContent;

/// struct for passing parameters to the method [`create_vouchers_resource`]
#[derive(Clone, Debug, Default)]
pub struct CreateVouchersResourceParams {
    /// Financial year id, used to determine which financial year the voucher is created in
    pub financialyear: Option<i32>,
    /// voucher to create
    pub voucher: Option<crate::http::models::VoucherWrap>,
}

/// struct for passing parameters to the method [`get_vouchers_resource`]
#[derive(Clone, Debug, Default)]
pub struct GetVouchersResourceParams {
    /// identifies the voucher series
    pub voucher_series: String,
    /// identifies the voucher number
    pub voucher_number: i32,
    /// filter on financial year
    pub financialyear: Option<i32>,
}

/// struct for passing parameters to the method [`list_series`]
#[derive(Clone, Debug, Default)]
pub struct ListSeriesParams {
    /// identifies the voucher series
    pub voucher_series: String,
    /// filter on financial year
    pub financialyear: Option<i32>,
}

/// struct for passing parameters to the method [`list_vouchers_resource`]
#[derive(Clone, Debug, Default)]
pub struct ListVouchersResourceParams {
    /// filter on financial year
    pub financialyear: Option<i32>,
}

/// struct for typed errors of method [`create_vouchers_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateVouchersResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_vouchers_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVouchersResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_series`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSeriesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_vouchers_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVouchersResourceError {
    UnknownValue(serde_json::Value),
}

/// The created voucher will be returned if everything succeeded, if there was any problems an error will be returned.  If no query param is used the voucher will be created in the preselected financial year. Go to the financialyears endpoint to read on how to retreive the Financial year id.
pub async fn create_vouchers_resource(
    configuration: &configuration::Configuration,
    params: CreateVouchersResourceParams,
) -> Result<crate::http::models::VoucherWrap, Error<CreateVouchersResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let financialyear = params.financialyear;
    let voucher = params.voucher;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/vouchers/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = financialyear {
        local_var_req_builder =
            local_var_req_builder.query(&[("financialyear", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&voucher);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateVouchersResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_vouchers_resource(
    configuration: &configuration::Configuration,
    params: GetVouchersResourceParams,
) -> Result<crate::http::models::VoucherWrap, Error<GetVouchersResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let voucher_series = params.voucher_series;
    let voucher_number = params.voucher_number;
    let financialyear = params.financialyear;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/vouchers/{VoucherSeries}/{VoucherNumber}",
        local_var_configuration.base_path,
        VoucherSeries = crate::http::apis::urlencode(voucher_series),
        VoucherNumber = voucher_number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = financialyear {
        local_var_req_builder =
            local_var_req_builder.query(&[("financialyear", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetVouchersResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_series(
    configuration: &configuration::Configuration,
    params: ListSeriesParams,
) -> Result<crate::http::models::VoucherListItemList, Error<ListSeriesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let voucher_series = params.voucher_series;
    let financialyear = params.financialyear;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/vouchers/sublist/{VoucherSeries}",
        local_var_configuration.base_path,
        VoucherSeries = crate::http::apis::urlencode(voucher_series)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = financialyear {
        local_var_req_builder =
            local_var_req_builder.query(&[("financialyear", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListSeriesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Note that vouchers have two keys, one for voucher series and one for voucher number. The financial year is also specified for each voucher, this is due to the same voucher series and number is used each year.  To get a unique voucher you need the voucher series, the voucher number and the financial year. These properties will always be returned where ever vouchers is used.
pub async fn list_vouchers_resource(
    configuration: &configuration::Configuration,
    params: ListVouchersResourceParams,
) -> Result<crate::http::models::VoucherListItemList, Error<ListVouchersResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let financialyear = params.financialyear;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/vouchers/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = financialyear {
        local_var_req_builder =
            local_var_req_builder.query(&[("financialyear", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        tracing::debug!("Response: {}", local_var_content);
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListVouchersResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
