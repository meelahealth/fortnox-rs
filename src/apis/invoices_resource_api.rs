/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for passing parameters to the method [`bookkeep_invoices_resource`]
#[derive(Clone, Debug, Default)]
pub struct BookkeepInvoicesResourceParams {
    /// identifies the invoice
    pub document_number: String,
}

/// struct for passing parameters to the method [`cancel`]
#[derive(Clone, Debug, Default)]
pub struct CancelParams {
    /// identifies the invoice
    pub document_number: String,
}

/// struct for passing parameters to the method [`create_invoices_resource`]
#[derive(Clone, Debug, Default)]
pub struct CreateInvoicesResourceParams {
    /// payload
    pub invoice_payload: Option<crate::models::InvoicePayloadWrap>,
}

/// struct for passing parameters to the method [`credit`]
#[derive(Clone, Debug, Default)]
pub struct CreditParams {
    /// identifies the invoice
    pub document_number: String,
}

/// struct for passing parameters to the method [`e_invoice`]
#[derive(Clone, Debug, Default)]
pub struct EInvoiceParams {
    /// identifies the invoice
    pub document_number: String,
}

/// struct for passing parameters to the method [`e_print`]
#[derive(Clone, Debug, Default)]
pub struct EPrintParams {
    /// identifies the invoice
    pub document_number: String,
}

/// struct for passing parameters to the method [`email`]
#[derive(Clone, Debug, Default)]
pub struct EmailParams {
    /// identifies the invoice
    pub document_number: String,
}

/// struct for passing parameters to the method [`external_print`]
#[derive(Clone, Debug, Default)]
pub struct ExternalPrintParams {
    /// identifies the invoice
    pub document_number: String,
}

/// struct for passing parameters to the method [`get_invoices_resource`]
#[derive(Clone, Debug, Default)]
pub struct GetInvoicesResourceParams {
    /// identifies the invoice
    pub document_number: String,
}

/// struct for passing parameters to the method [`list_invoices_resource`]
#[derive(Clone, Debug, Default)]
pub struct ListInvoicesResourceParams {
    /// possibility to filter invoices
    pub filter: Option<String>,
    pub costcenter: Option<String>,
    pub customername: Option<String>,
    pub customernumber: Option<String>,
    pub label: Option<String>,
    pub documentnumber: Option<String>,
    pub fromdate: Option<String>,
    pub todate: Option<String>,
    pub fromfinalpaydate: Option<String>,
    pub tofinalpaydate: Option<String>,
    pub lastmodified: Option<String>,
    pub notcompleted: Option<String>,
    pub ocr: Option<String>,
    pub ourreference: Option<String>,
    pub project: Option<String>,
    pub sent: Option<String>,
    pub externalinvoicereference1: Option<String>,
    pub externalinvoicereference2: Option<String>,
    pub yourreference: Option<String>,
    pub invoicetype: Option<String>,
    pub articlenumber: Option<String>,
    pub articledescription: Option<String>,
    pub currency: Option<String>,
    pub accountnumberfrom: Option<String>,
    pub accountnumberto: Option<String>,
    pub yourordernumber: Option<String>,
    pub credit: Option<String>,
    /// field to sort returned list on
    pub sortby: Option<String>,
}

/// struct for passing parameters to the method [`preview`]
#[derive(Clone, Debug, Default)]
pub struct PreviewParams {
    /// identifies the invoice
    pub document_number: String,
}

/// struct for passing parameters to the method [`print`]
#[derive(Clone, Debug, Default)]
pub struct PrintParams {
    /// identifies the invoice
    pub document_number: String,
}

/// struct for passing parameters to the method [`print_reminder`]
#[derive(Clone, Debug, Default)]
pub struct PrintReminderParams {
    /// identifies the invoice
    pub document_number: String,
}

/// struct for passing parameters to the method [`update_invoices_resource`]
#[derive(Clone, Debug, Default)]
pub struct UpdateInvoicesResourceParams {
    /// identifies the invoice
    pub document_number: String,
    /// payload
    pub invoice_payload: Option<crate::models::InvoicePayloadWrap>,
}

/// struct for passing parameters to the method [`warehouse_ready`]
#[derive(Clone, Debug, Default)]
pub struct WarehouseReadyParams {
    /// identifies the invoice
    pub document_number: String,
}

/// struct for typed errors of method [`bookkeep_invoices_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum BookkeepInvoicesResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`cancel`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CancelError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_invoices_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateInvoicesResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`credit`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreditError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`e_invoice`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EInvoiceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`e_print`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EPrintError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`email`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EmailError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`external_print`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExternalPrintError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_invoices_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInvoicesResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_invoices_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListInvoicesResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`preview`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PreviewError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`print`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PrintError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`print_reminder`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PrintReminderError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_invoices_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateInvoicesResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`warehouse_ready`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WarehouseReadyError {
    UnknownValue(serde_json::Value),
}

pub async fn bookkeep_invoices_resource(
    configuration: &configuration::Configuration,
    params: BookkeepInvoicesResourceParams,
) -> Result<crate::models::InvoiceWrap, Error<BookkeepInvoicesResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/invoices/{DocumentNumber}/bookkeep",
        local_var_configuration.base_path,
        DocumentNumber = crate::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<BookkeepInvoicesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn cancel(
    configuration: &configuration::Configuration,
    params: CancelParams,
) -> Result<crate::models::InvoiceWrap, Error<CancelError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/invoices/{DocumentNumber}/cancel",
        local_var_configuration.base_path,
        DocumentNumber = crate::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CancelError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// An endpoint for creating an invoice. While it is possible to create an invoice without rows, we encourage you to add them if you can.  Omitted values in the payload will be supplied by Predefined values which can be edited in the Fortnox account settings.  Note that Predefined values will always be overwritten by values provided through the API.   Should you have EasyVat enabled, it is mandatory to provide an account in the request should you use a custom VAT rate.   This endpoint can produce errors, some of which may only be relevant for EasyVat. Refer to the table below.  <table>  <caption>Errors that can be raised by this endpoint.</caption>    <tr>     <th>Error Code</th>     <th>HTTP Code</th>     <th>Description</th>     <th>Solution</th>    </tr>    <tr>     <td>2004167</td>     <td>400</td>     <td>An account must be provided when using a custom VAT rate and EasyVat has been enabled.</td>     <td>Supply each row which has a custom VAT rate with an account.</td>    </tr>  </table>   Note: The <b>EuQuarterlyReport</b> property will become obsolete at 2021-12-01.  This property is currently used by the <b>Quarterly</b> report as one of the conditions that determine if an invoice  should be included in the report or not.  A new version of the <b>Quarterly</b> report is released at 2021-12-01. In the new report, this property will not be  used when determining if an invoice should be included in the report or not, with one exception: if the invoice  is created before 2021-12-01, and this property is false, the invoice will be excluded from the report.  For invoices created 2021-12-01 and later, this property will have no effect.
pub async fn create_invoices_resource(
    configuration: &configuration::Configuration,
    params: CreateInvoicesResourceParams,
) -> Result<crate::models::InvoiceWrap, Error<CreateInvoicesResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let invoice_payload = params.invoice_payload;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/invoices", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&invoice_payload);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateInvoicesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// The created credit invoice will be referenced in the property CreditInvoiceReference.
pub async fn credit(
    configuration: &configuration::Configuration,
    params: CreditParams,
) -> Result<crate::models::InvoiceWrap, Error<CreditError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/invoices/{DocumentNumber}/credit",
        local_var_configuration.base_path,
        DocumentNumber = crate::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreditError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn e_invoice(
    configuration: &configuration::Configuration,
    params: EInvoiceParams,
) -> Result<crate::models::InvoiceWrap, Error<EInvoiceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/invoices/{DocumentNumber}/einvoice",
        local_var_configuration.base_path,
        DocumentNumber = crate::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EInvoiceError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn e_print(
    configuration: &configuration::Configuration,
    params: EPrintParams,
) -> Result<crate::models::InvoiceWrap, Error<EPrintError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/invoices/{DocumentNumber}/eprint",
        local_var_configuration.base_path,
        DocumentNumber = crate::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EPrintError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// You can use the properties in the EmailInformation to customize the e-mail message on each invoice.
pub async fn email(
    configuration: &configuration::Configuration,
    params: EmailParams,
) -> Result<crate::models::InvoiceWrap, Error<EmailError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/invoices/{DocumentNumber}/email",
        local_var_configuration.base_path,
        DocumentNumber = crate::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EmailError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use this endpoint to set invoice as sent, without generating an invoice.
pub async fn external_print(
    configuration: &configuration::Configuration,
    params: ExternalPrintParams,
) -> Result<crate::models::InvoiceWrap, Error<ExternalPrintError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/invoices/{DocumentNumber}/externalprint",
        local_var_configuration.base_path,
        DocumentNumber = crate::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExternalPrintError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_invoices_resource(
    configuration: &configuration::Configuration,
    params: GetInvoicesResourceParams,
) -> Result<crate::models::InvoiceWrap, Error<GetInvoicesResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/invoices/{DocumentNumber}",
        local_var_configuration.base_path,
        DocumentNumber = crate::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetInvoicesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_invoices_resource(
    configuration: &configuration::Configuration,
    params: ListInvoicesResourceParams,
) -> Result<crate::models::InvoiceListItemWrap, Error<ListInvoicesResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let filter = params.filter;
    let costcenter = params.costcenter;
    let customername = params.customername;
    let customernumber = params.customernumber;
    let label = params.label;
    let documentnumber = params.documentnumber;
    let fromdate = params.fromdate;
    let todate = params.todate;
    let fromfinalpaydate = params.fromfinalpaydate;
    let tofinalpaydate = params.tofinalpaydate;
    let lastmodified = params.lastmodified;
    let notcompleted = params.notcompleted;
    let ocr = params.ocr;
    let ourreference = params.ourreference;
    let project = params.project;
    let sent = params.sent;
    let externalinvoicereference1 = params.externalinvoicereference1;
    let externalinvoicereference2 = params.externalinvoicereference2;
    let yourreference = params.yourreference;
    let invoicetype = params.invoicetype;
    let articlenumber = params.articlenumber;
    let articledescription = params.articledescription;
    let currency = params.currency;
    let accountnumberfrom = params.accountnumberfrom;
    let accountnumberto = params.accountnumberto;
    let yourordernumber = params.yourordernumber;
    let credit = params.credit;
    let sortby = params.sortby;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/invoices", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = filter {
        local_var_req_builder =
            local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = costcenter {
        local_var_req_builder =
            local_var_req_builder.query(&[("costcenter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = customername {
        local_var_req_builder =
            local_var_req_builder.query(&[("customername", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = customernumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("customernumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label {
        local_var_req_builder =
            local_var_req_builder.query(&[("label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = documentnumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("documentnumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fromdate {
        local_var_req_builder =
            local_var_req_builder.query(&[("fromdate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = todate {
        local_var_req_builder =
            local_var_req_builder.query(&[("todate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fromfinalpaydate {
        local_var_req_builder =
            local_var_req_builder.query(&[("fromfinalpaydate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tofinalpaydate {
        local_var_req_builder =
            local_var_req_builder.query(&[("tofinalpaydate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lastmodified {
        local_var_req_builder =
            local_var_req_builder.query(&[("lastmodified", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = notcompleted {
        local_var_req_builder =
            local_var_req_builder.query(&[("notcompleted", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ocr {
        local_var_req_builder = local_var_req_builder.query(&[("ocr", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ourreference {
        local_var_req_builder =
            local_var_req_builder.query(&[("ourreference", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = project {
        local_var_req_builder =
            local_var_req_builder.query(&[("project", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sent {
        local_var_req_builder =
            local_var_req_builder.query(&[("sent", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = externalinvoicereference1 {
        local_var_req_builder = local_var_req_builder
            .query(&[("externalinvoicereference1", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = externalinvoicereference2 {
        local_var_req_builder = local_var_req_builder
            .query(&[("externalinvoicereference2", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = yourreference {
        local_var_req_builder =
            local_var_req_builder.query(&[("yourreference", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = invoicetype {
        local_var_req_builder =
            local_var_req_builder.query(&[("invoicetype", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = articlenumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("articlenumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = articledescription {
        local_var_req_builder =
            local_var_req_builder.query(&[("articledescription", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = currency {
        local_var_req_builder =
            local_var_req_builder.query(&[("currency", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = accountnumberfrom {
        local_var_req_builder =
            local_var_req_builder.query(&[("accountnumberfrom", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = accountnumberto {
        local_var_req_builder =
            local_var_req_builder.query(&[("accountnumberto", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = yourordernumber {
        local_var_req_builder =
            local_var_req_builder.query(&[("yourordernumber", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = credit {
        local_var_req_builder =
            local_var_req_builder.query(&[("credit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sortby {
        local_var_req_builder =
            local_var_req_builder.query(&[("sortby", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListInvoicesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// The difference between this and the print-endpoint is that property Sent is not set to TRUE.
pub async fn preview(
    configuration: &configuration::Configuration,
    params: PreviewParams,
) -> Result<String, Error<PreviewError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/invoices/{DocumentNumber}/preview",
        local_var_configuration.base_path,
        DocumentNumber = crate::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PreviewError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn print(
    configuration: &configuration::Configuration,
    params: PrintParams,
) -> Result<String, Error<PrintError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/invoices/{DocumentNumber}/print",
        local_var_configuration.base_path,
        DocumentNumber = crate::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PrintError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn print_reminder(
    configuration: &configuration::Configuration,
    params: PrintReminderParams,
) -> Result<String, Error<PrintReminderError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/invoices/{DocumentNumber}/printreminder",
        local_var_configuration.base_path,
        DocumentNumber = crate::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PrintReminderError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Note that there are two approaches for updating the rows on an invoice.   If RowId is not specified on any row, the rows will be mapped and updated in the order in which they are set in the array. All rows that should remain on the invoice needs to be provided.   If RowId is specified on one or more rows the following goes: Corresponding row with that id will be updated. The rows without RowId will be interpreted as new rows. If a row should not be updated but remain on the invoice then specify only RowId like { \"RowId\": 123 }, otherwise it will be removed. Note that new RowIds are generated for all rows every time an invoice is updated.   Note: The <b>EuQuarterlyReport</b> property will become obsolete at 2021-12-01.  This property is currently used by the <b>Quarterly</b> report as one of the conditions that determine if an invoice  should be included in the report or not.  A new version of the <b>Quarterly</b> report is released at 2021-12-01. In the new report, this property will not be  used when determining if an invoice should be included in the report or not, with one exception: if the invoice  is created before 2021-12-01, and this property is false, the invoice will be excluded from the report.  For invoices created 2021-12-01 and later, this property will have no effect.
pub async fn update_invoices_resource(
    configuration: &configuration::Configuration,
    params: UpdateInvoicesResourceParams,
) -> Result<crate::models::InvoiceWrap, Error<UpdateInvoicesResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;
    let invoice_payload = params.invoice_payload;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/invoices/{DocumentNumber}",
        local_var_configuration.base_path,
        DocumentNumber = crate::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&invoice_payload);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateInvoicesResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Used for marking a document as ready in the warehouse module. DeliveryState needs to be set to &quot;delivery&quot;.
pub async fn warehouse_ready(
    configuration: &configuration::Configuration,
    params: WarehouseReadyParams,
) -> Result<crate::models::InvoiceWrap, Error<WarehouseReadyError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/invoices/{DocumentNumber}/warehouseready",
        local_var_configuration.base_path,
        DocumentNumber = crate::apis::urlencode(document_number)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<WarehouseReadyError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
