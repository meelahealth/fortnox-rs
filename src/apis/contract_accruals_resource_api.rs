/*
 * # Documentation   The Fortnox API is organized around REST. This means that weâ€™ve designed it to have resource-oriented URLs and be as predictable as possible for you as developer.  It also means that we use HTTP status codes when something goes wrong and HTTP verbs understod by many API clients around the web.  We use a modified version of OAuth2 for authentication to offer a secure way for both you and our users to interact.  The API is generally built to support both XML and JSON but in this documentation all the examples will be in JSON.  We encourage you to read all the articles in the [general information section](https://developer.fortnox.se/general/)</a> first, before going forward and learning about the different resources.  This to ensure you get an understanding of some of the shared components of the API such as parameters and error handling.  ## Rate limits  The limit is 4 requests per second per access-token. This equals to a bit more than 200 requests per minute.  [Read more about this here.](https://developer.fortnox.se/general/regarding-fortnox-api-rate-limits/)  ## Query parameters  Use query parameters with the ?-character and separate parameters with the &-character.   **Example:**  GET - https://api.fortnox.se/3/invoices?accountnumberfrom=3000&accountnumberto=4000 Read more about our parameters [here](https://developer.fortnox.se/general/parameters/)   Search the documentation using the search field in the top left corner.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for passing parameters to the method [`create_contract_accruals_resource`]
#[derive(Clone, Debug, Default)]
pub struct CreateContractAccrualsResourceParams {
    /// contract accrual to create
    pub contract_accrual: Option<crate::models::ContractAccrualWrap>,
}

/// struct for passing parameters to the method [`get_contract_accruals_resource`]
#[derive(Clone, Debug, Default)]
pub struct GetContractAccrualsResourceParams {
    /// identifies the contract accrual
    pub document_number: i32,
}

/// struct for passing parameters to the method [`remove_contract_accruals_resource`]
#[derive(Clone, Debug, Default)]
pub struct RemoveContractAccrualsResourceParams {
    /// identifies the contract accrual
    pub document_number: i32,
}

/// struct for passing parameters to the method [`update_contract_accruals_resource`]
#[derive(Clone, Debug, Default)]
pub struct UpdateContractAccrualsResourceParams {
    /// identifies the contract accrual
    pub document_number: i32,
    /// contract accrual to update
    pub contract_accrual: Option<crate::models::ContractAccrualWrap>,
}

/// struct for typed errors of method [`create_contract_accruals_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateContractAccrualsResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_contract_accruals_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetContractAccrualsResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_contract_accruals_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListContractAccrualsResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`remove_contract_accruals_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveContractAccrualsResourceError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_contract_accruals_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateContractAccrualsResourceError {
    UnknownValue(serde_json::Value),
}

pub async fn create_contract_accruals_resource(
    configuration: &configuration::Configuration,
    params: CreateContractAccrualsResourceParams,
) -> Result<crate::models::ContractAccrualWrap, Error<CreateContractAccrualsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let contract_accrual = params.contract_accrual;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/contractaccruals/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&contract_accrual);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateContractAccrualsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_contract_accruals_resource(
    configuration: &configuration::Configuration,
    params: GetContractAccrualsResourceParams,
) -> Result<crate::models::ContractAccrualWrap, Error<GetContractAccrualsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/contractaccruals/{DocumentNumber}",
        local_var_configuration.base_path,
        DocumentNumber = document_number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetContractAccrualsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// The contract accruals register can return a list of records or a single record. By specifying a DocumentNumber in the URL, a single record will be returned. Not specifying a DocumentNumber will return a list of records.
pub async fn list_contract_accruals_resource(
    configuration: &configuration::Configuration,
) -> Result<crate::models::ContractAccrualListItemList, Error<ListContractAccrualsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/3/contractaccruals/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListContractAccrualsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn remove_contract_accruals_resource(
    configuration: &configuration::Configuration,
    params: RemoveContractAccrualsResourceParams,
) -> Result<(), Error<RemoveContractAccrualsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/contractaccruals/{DocumentNumber}",
        local_var_configuration.base_path,
        DocumentNumber = document_number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<RemoveContractAccrualsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_contract_accruals_resource(
    configuration: &configuration::Configuration,
    params: UpdateContractAccrualsResourceParams,
) -> Result<crate::models::ContractAccrualWrap, Error<UpdateContractAccrualsResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let document_number = params.document_number;
    let contract_accrual = params.contract_accrual;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/3/contractaccruals/{DocumentNumber}",
        local_var_configuration.base_path,
        DocumentNumber = document_number
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&contract_accrual);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateContractAccrualsResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
